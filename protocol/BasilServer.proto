/*
 * Interface to Basil. The interface a client talks to a Basil renderer.
 * These fall into several classes:
 *    Connection creation and management.
 *    Object/instance definition and management.
 *    Resource queries and management.
 * Since there is a browser version of Basil and (as of 20180201) there are not
 *    tools for creating a gRPG server in a browser, the communication with the
 *    viewer service is a stream of ProtoBuf messages.
 */

syntax = "proto3";

package Basil;

import "BasilTypes.proto";
import "BTransport.proto";

// OBJECT/INSTANCE MANAGEMENT ===============================================

// Describe an object to Basil for later display or manipulation
// This associates an ID with a block of asset information that can be 
//   later displayed or operated on.
message IdentifyDisplayableObjectReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    BasilType.ObjectIdentifier id = 3;
    BasilType.AssetInformation assetInfo = 4;
    BasilType.AaBoundingBox aabb = 5;
}
message IdentifyDisplayableObjectResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
}
// An object may occur multiple times. This defines one instance
//   that is at a particular location in the world.
// Returns an instanceIdentifer that can be used to refer to the instance.
message CreateObjectInstanceReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    BasilType.ObjectIdentifier id = 3;
    BasilType.InstancePositionInfo pos = 4;
    BasilType.PropertyList propertiesToSet = 5;
}
message CreateObjectInstanceResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
    BasilType.InstanceIdentifier createInstanceId = 3;
}
// Update a property of an object. This could effect all instances.
message UpdateObjectPropertyReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    BasilType.ObjectIdentifier objectId = 3;
    BasilType.PropertyList props = 4;
}
message UpdateObjectPropertyResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
}
// Update a property of an instance
message UpdateInstancePropertyReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    BasilType.InstanceIdentifier instanceId = 3;
    BasilType.PropertyList props = 4;
}
message UpdateInstancePropertyResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
}
// A short form that updates the position properties of an instance
message UpdateInstancePositionReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    BasilType.InstanceIdentifier instanceId = 3;
    BasilType.InstancePositionInfo pos = 4;
}
message UpdateInstancePositionResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
}
// Get the properties of an object
message RequestObjectPropertiesReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    int32 sequenceNumber = 3;
    BasilType.ObjectIdentifier objectId = 4;
    string propertyMatch = 5;   // wildcard used to match returned properties
}
message RequestObjectPropertiesResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
    BasilType.PropertyList properties = 3;
}
// Get the properties of an instance
message RequestInstancePropertiesReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    int32 sequenceNumber = 3;
    BasilType.InstanceIdentifier instanceId = 4;
    string propertyMatch = 5;   // wildcard used to match returned properties
}
message RequestInstancePropertiesResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
    BasilType.PropertyList properties = 3;
}

// RESOURCE MANAGEMENT ===============================================

// CONNECTION MANAGEMENT =============================================

// A client initiates a connection.
// Returned property list is a collection of Basil renderer capabilities.
message OpenSessionReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    BasilType.PropertyList features = 3;    // features requested
}
message OpenSessionResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
    BasilType.PropertyList properties = 3;
}

message CloseSessionReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    string reason = 3;    // if there is a reason for leaving
}
message CloseSessionResp {
    BTransport.BTransport transport = 1;
    BasilType.BasilException success = 2;
}
// Ping the other side to measure delay and functionality
message AliveCheckReq {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;   // not just anyone can see I'm alive
    sint64 time = 3;
    int32 sequenceNumber = 4;
}
message AliveCheckResp {
    BTransport.BTransport transport = 1;
    BasilType.AccessAuthorization auth = 2;
    sint64 time = 3;
    int32 sequenceNumber = 4;
    sint64 timeReceived = 5;             // When the AliveCheck was received
    int32 sequenceNumberReceived = 6;   // The sequence number sent in the AliveCheck
}

service BasilServer {
    // OBJECT/INSTANCE MANAGEMENT ===============================================

    // Describe an object to Basil for later display or manipulation
    // This associates an ID with a block of asset information that can be 
    //   later displayed or operated on.
    rpc IdentifyDisplayableObject (IdentifyDisplayableObjectReq) returns (IdentifyDisplayableObjectResp);

    // An object may occur multiple times. This defines one instance
    //   that is at a particular location in the world.
    // Returns an instanceIdentifer that can be used to refer to the instance.
    rpc CreateObjectInstance (CreateObjectInstanceReq) returns (CreateObjectInstanceResp);

    // Update a property of an object. This could effect all instances.
    rpc UpdateObjectProperty (UpdateObjectPropertyReq) returns (UpdateObjectPropertyResp);

    // Update a property of an instance
    rpc UpdateInstanceProperty (UpdateInstancePropertyReq) returns (UpdateInstancePropertyResp);

    // A short form that updates the position properties of an instance
    rpc UpdateInstancePosition (UpdateInstancePositionReq) returns (UpdateInstancePositionResp);

    // Get the properties of an object
    rpc RequestObjectProperties (RequestObjectPropertiesReq) returns (RequestObjectPropertiesResp);

    // Get the properties of an instance
    rpc RequestInstanceProperties (RequestInstancePropertiesReq) returns (RequestInstancePropertiesResp);

    // RESOURCE MANAGEMENT ===============================================

    // CONNECTION MANAGEMENT =============================================

    // A client initiates a connection.
    // Returned property list is a collection of Basil renderer capabilities.
    rpc OpenSession (OpenSessionReq) returns (OpenSessionResp);

    // Client is initiating an end to the session
    rpc CloseSession (CloseSessionReq) returns (CloseSessionResp);

    // Ping the other side to measure delay and functionality
    rpc AliveCheck (AliveCheckReq) returns (AliveCheckResp);
}
