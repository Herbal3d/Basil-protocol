/*
 * Interface to Basil. The interface a client talks to a Basil renderer.
 * These fall into several classes:
 *    Connection creation and management.
 *    Object/instance definition and management.
 *    Resource queries and management.
 * Since there is a browser version of Basil and (as of 20180201) there are not
 *    tools for creating a gRPG server in a browser, the communication with the
 *    viewer service is a stream of ProtoBuf messages.
 */

syntax = "proto3";

package BasilServer;

import "BasilTypes.proto";

// OBJECT/INSTANCE MANAGEMENT ===============================================

// Describe an object to Basil for later display or manipulation
// This associates an ID with a block of asset information that can be 
//   later displayed or operated on.
message IdentifyDisplayableObjectReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.AssetInformation assetInfo = 2;
    BasilType.AaBoundingBox aabb = 3;
}
message IdentifyDisplayableObjectResp {
    BasilType.BasilException exception = 1;
    BasilType.ObjectIdentifier identifier = 2;
}
message ForgetDisplayableObjectReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.ObjectIdentifier identifier = 2;
}
message ForgetDisplayableObjectResp {
    BasilType.BasilException exception = 1;
}
// An object may occur multiple times. This defines one instance
//   that is at a particular location in the world.
// Returns an instanceIdentifer that can be used to refer to the instance.
message CreateObjectInstanceReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.ObjectIdentifier identifier = 2;
    BasilType.InstancePositionInfo pos = 3;
    BasilType.PropertyList propertiesToSet = 4;
    int32 InstanceCountHint = 5;    // hint as to total number of instances (zero means no hint)
}
message CreateObjectInstanceResp {
    BasilType.BasilException exception = 1;
    BasilType.InstanceIdentifier createInstanceId = 2;
}
message DeleteObjectInstanceReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.InstanceIdentifier identifier = 2;
}
message DeleteObjectInstanceResp {
    BasilType.BasilException exception = 1;
}
// Update a property of an object. This could effect all instances.
message UpdateObjectPropertyReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.ObjectIdentifier identifier = 2;
    BasilType.PropertyList props = 3;
}
message UpdateObjectPropertyResp {
    BasilType.BasilException exception = 1;
}
// Update a property of an instance
message UpdateInstancePropertyReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.InstanceIdentifier instanceId = 2;
    BasilType.PropertyList props = 3;
}
message UpdateInstancePropertyResp {
    BasilType.BasilException exception = 1;
}
// A short form that updates the position properties of an instance
message UpdateInstancePositionReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.InstanceIdentifier instanceId = 2;
    BasilType.InstancePositionInfo pos = 3;
}
message UpdateInstancePositionResp {
    BasilType.BasilException exception = 1;
}
// Get the properties of an object
message RequestObjectPropertiesReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.ObjectIdentifier identifier = 2;
    string propertyMatch = 3;   // wildcard used to match returned properties
}
message RequestObjectPropertiesResp {
    BasilType.BasilException exception = 1;
    BasilType.PropertyList properties = 2;
}
// Get the properties of an instance
message RequestInstancePropertiesReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.InstanceIdentifier instanceId = 2;
    string propertyMatch = 3;   // wildcard used to match returned properties
}
message RequestInstancePropertiesResp {
    BasilType.BasilException exception = 1;
    BasilType.PropertyList properties = 2;
}

// RESOURCE MANAGEMENT ===============================================

// CONNECTION MANAGEMENT =============================================

// A client initiates a connection.
// Returned property list is a collection of Basil renderer capabilities.
message OpenSessionReq {
    BasilType.AccessAuthorization auth = 1;
    BasilType.PropertyList features = 2;    // features requested
}
message OpenSessionResp {
    BasilType.BasilException exception = 1;
    BasilType.PropertyList properties = 2;
}

message CloseSessionReq {
    BasilType.AccessAuthorization auth = 1;
    string reason = 2;    // if there is a reason for leaving
}
message CloseSessionResp {
    BasilType.BasilException exception = 1;
}
// Ping the other side to measure delay and functionality
message AliveCheckReq {
    BasilType.AccessAuthorization auth = 1;   // not just anyone can see I'm alive
    uint64 time = 2;
    int32 sequenceNum = 3;
}
message AliveCheckResp {
    uint64 time = 1;
    int32 sequenceNum = 2;
    uint64 timeReceived = 3;             // When the AliveCheck was received
    int32 sequenceNumReceived = 4;   // The sequence number sent in the AliveCheck
}

// TRANSPORT MESSAGE DEFINITION  =======================================
message BasilServerMessage {
    oneof msg {
        IdentifyDisplayableObjectReq    IdentifyDisplayableObjectReqMsg     = 1;
        IdentifyDisplayableObjectResp   IdentifyDisplayableObjectRespMsg    = 2;
        ForgetDisplayableObjectReq      ForgetDisplayableObjectReqMsg       = 3;
        ForgetDisplayableObjectResp     ForgetDisplayableObjectRespMsg      = 4;
        CreateObjectInstanceReq         CreateObjectInstanceReqMsg          = 5;
        CreateObjectInstanceResp        CreateObjectInstanceRespMsg         = 6;
        DeleteObjectInstanceReq         DeleteObjectInstanceReqMsg          = 7;
        DeleteObjectInstanceResp        DeleteObjectInstanceRespMsg         = 8;
        UpdateObjectPropertyReq         UpdateObjectPropertyReqMsg          = 9;
        UpdateObjectPropertyResp        UpdateObjectPropertyRespMsg         = 10;
        UpdateInstancePropertyReq       UpdateInstancePropertyReqMsg        = 11;
        UpdateInstancePropertyResp      UpdateInstancePropertyRespMsg       = 12;
        UpdateInstancePositionReq       UpdateInstancePositionReqMsg        = 13;
        UpdateInstancePositionResp      UpdateInstancePositionRespMsg       = 14;
        RequestObjectPropertiesReq      RequestObjectPropertiesReqMsg       = 15;
        RequestObjectPropertiesResp     RequestObjectPropertiesRespMsg      = 16;
        RequestInstancePropertiesReq    RequestInstancePropertiesReqMsg     = 17;
        RequestInstancePropertiesResp   RequestInstancePropertiesRespMsg    = 18;
        OpenSessionReq                  OpenSessionReqMsg                   = 19;
        OpenSessionResp                 OpenSessionRespMsg                  = 20;
        CloseSessionReq                 CloseSessionReqMsg                  = 21;
        CloseSessionResp                CloseSessionRespMsg                 = 22;
        AliveCheckReq                   AliveCheckReqMsg                    = 23;
        AliveCheckResp                  AliveCheckRespMsg                   = 24;
    }
}

// SERVER DEFINITION  ==================================================
service BasilServer {
    // OBJECT/INSTANCE MANAGEMENT ======================================

    // Describe an object to Basil for later display or manipulation
    // This associates an ID with a block of asset information that can be 
    //   later displayed or operated on.
    rpc IdentifyDisplayableObject (IdentifyDisplayableObjectReq) returns (IdentifyDisplayableObjectResp);

    // An object may occur multiple times. This defines one instance
    //   that is at a particular location in the world.
    // Returns an instanceIdentifer that can be used to refer to the instance.
    rpc CreateObjectInstance (CreateObjectInstanceReq) returns (CreateObjectInstanceResp);

    // Update a property of an object. This could effect all instances.
    rpc UpdateObjectProperty (UpdateObjectPropertyReq) returns (UpdateObjectPropertyResp);

    // Update a property of an instance
    rpc UpdateInstanceProperty (UpdateInstancePropertyReq) returns (UpdateInstancePropertyResp);

    // A short form that updates the position properties of an instance
    rpc UpdateInstancePosition (UpdateInstancePositionReq) returns (UpdateInstancePositionResp);

    // Get the properties of an object
    rpc RequestObjectProperties (RequestObjectPropertiesReq) returns (RequestObjectPropertiesResp);

    // Get the properties of an instance
    rpc RequestInstanceProperties (RequestInstancePropertiesReq) returns (RequestInstancePropertiesResp);

    // RESOURCE MANAGEMENT ===============================================

    // CONNECTION MANAGEMENT =============================================

    // A client initiates a connection.
    // Returned property list is a collection of Basil renderer capabilities.
    rpc OpenSession (OpenSessionReq) returns (OpenSessionResp);

    // Client is initiating an end to the session
    rpc CloseSession (CloseSessionReq) returns (CloseSessionResp);

    // Ping the other side to measure delay and functionality
    rpc AliveCheck (AliveCheckReq) returns (AliveCheckResp);
}
