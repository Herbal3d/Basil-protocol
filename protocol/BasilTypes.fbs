/*
 * Types that are used in the communications with Basil
 */

namespace org.herbal3d.protocol.basil;

// GEOMETRY ==================================
struct Vector3 {
    X: double;
    Y: double;
    Z: double;
}

struct Vector3F {
    X: float;
    Y: float;
    Z: float;
}

struct Quaternion {
    X: double;
    Y: double;
    Z: double;
    W: double;
}

struct QuaternionF {
    X: float;
    Y: float;
    Z: float;
    W: float;
}

table Transform {
    matrix: [double];
}

/*
table TransformF {
    matrix: [float];
}
*/

// MISC ==================================

// signed milliseconds since 0 BCE UTC
// #typedef timecode uint64

// Messages have sequence numbers which count up from 0 at the beginning of a session
// #typedef messageSequenceNumber uint32

// Some items (subscriptions, ...) have IDs to track them.
// #typedef simpleID uint32

// Entities and instances can have properties that can be read and updated independently
table PropertyValue {
    property: string;
    value: string;
}
// #typedef propertyList [propertyValue]

// errors have codes so internationalization is possible
// #typedef exceptionCode uint
table BasilException {
    reason: string;
    hints: [ PropertyValue ];   // additional information for recovery. Error dependent.
}

enum coordSystem : ubyte {
    WGS86 = 1,  // WGS84 earth coordinates
    CAMERA,     // Coordinates relative to camera position (-1..1 range, zero center)
    CAMERAABS,  // Absolute coordinates relative to the camera position (zero center)
    VIRTUAL,    // Zero based un-rooted coordinates
    MOON,       // Earth-moon coordinates
    MARS,       // Mars coordinates
    REL1,       // Mutually agreed base coordinates
    REL2,
    REL3
}
// #typedef coordRef ubyte

enum rotationSystem : ubyte {
    WORLD = 1,  // rotation is relative to work coordinates
    FOR,        // rotation is relative to current frame of reference
    CAMERA      // rotation is relative to the camera direction
}
// #typedef rotationRef ubyte

table coordPosition {
    pos: Vector3;
    rot: QuaternionF;
    posRef: coordSystem = WGS86;  // coordRef;
    rotRef: rotationSystem = WORLD;  // rotationalRef;
}

// OBJECT INFORMATION ==================================

// The globally unique identifier of an object is a string (text GUID or URI)
// #typedef ObjectIdentifier string

// An object is realized in the world as an 'instance' which has position and
//    other individual properties. There can be multiple instances of an object.
//    Instances are referenced by an ID given to them when created.
// ID lifetime is the life of the particular Basil server being used.
// #typedef InstanceIdentifier uint

// An axis aligned area that contains an object
struct AaBoundingBox {
    upperFrontLeft: Vector3;
    lowerBackRight: Vector3;
}

// Description of the asset information for a displayable object
table AssetInformation {
    id: string;
    aabb: AaBoundingBox;        // bounding box for quick LOD, ...
    displayableType: string;    // type name
    attributes: [ PropertyValue ];   // attributes that make up the asset
}

// Description of a path that the object is moving on. Future
table PathDescription {
    pathType: string;
}

// A specification of object motion/position
table InstancePositionInfo {
    id: uint32;       // InstanceIdentifier;
    pos: coordPosition;
    vel: Vector3;
    path: PathDescription;
}

// Requests include authorization for the request.
// It is expected that a client could have multiple authorizations from different
//    sources and with different scopes so this access authorization blob
//    can contain multiple properties which consist of the authorization
//    source and a string representing that authorization. The coding
//    of the authorization follows the 'Authorization:' header line specified
//    in RFC2617 (https://tools.ietf.org/html/rfc2617)
//    which is a scheme token followed by an encoding of the authentication.
table AccessAuthorization {
    accessProperties: [ PropertyValue ];
}

// Requests can include trace information (like using Zipkin)
//   to trace calls. It's usually a JSON string.
table TraceInfo {
    info: string;
}
