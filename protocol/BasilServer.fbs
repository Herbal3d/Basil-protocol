/*
 * Interface to Basil. The interface a client talks to a Basil renderer.
 * These fall into several classes:
 *    Connection creation and management.
 *    Entity/instance definition and management.
 *    Resource queries and management.
 */

include "BasilTypes.fbs";
include "BTransportHdr.fbs";

namespace org.herbal3d.protocol.basil.server;

// OBJECT/INSTANCE MANAGEMENT =======================================

// Describe an entity to Basil for later display or manipulation.
// This associates an ID with a block of asset information that can be 
//   later displayed or operated on.
table AddEntity {
    auth: accessAuthorization;
    objectId: string;
    assetInfo: assetInformation;
    aabb: aaBoundingBox;
}

// Remove an entity from Basil. Removes all instances of the entity.
table RemoveEntity {
    auth: accessAuthorization;
    objectId: string;
}

// An entity may occur multiple times. This defines one instance
//   that is at a particular location in the world.
// Pass in an instanceIdentifer that can be used to refer to the instance.
table AddInstance {
    auth: accessAuthorization;
    instanceId: int;
    pos: instancePositionInfo;
    propertiesToSet: [ propertyValue ];
}

// Remove an entity instance from the scene.
table RemoveInstance {
    auth: accessAuthorization;
    instanceId: int;
}

// Get a new instance identifier that is guaranteed unique across Basil clients.
table GetUniqueInstanceId {
}

// Update a property of an object. This could effect all instances.
table UpdateEntityProperty {
    auth: accessAuthorization;
    objectId: string;
    props: [ propertyValue ] ;
}

// Update a property of an instance
table UpdateInstanceProperty {
    auth: accessAuthorization;
    instanceId: int;
    props: [ propertyValue ] ;
}

// A short form that updates the position properties of an instance
table UpdateInstancePosition {
    auth: accessAuthorization;
    instanceId: int;
    pos: instancePositionInfo;
}

// Fetch the properties for an object in the Basil server
table EntityPropertyRequest {
    auth: accessAuthorization;
    objectId: string;
    propertyMatch: string;
}

// Fetch the properties for an instance in the Basil server
table InstancePropertyRequest {
    auth: accessAuthorization;
    instanceId: int;
    propertyMatch: string;
}

// RESOURCE MANAGEMENT ==============================================

// SESSION MANAGEMENT ===============================================

// A client initiates a connection.
// Returned property list is a collection of Basil renderer capabilities.
table OpenSession {
    auth: accessAuthorization;
    params: [ propertyValue ];
}

// The renderer is initiating the end of the session
table CloseSession {
    reason: string;
}

// Send this to the other side to get an asynchronous AliveResponse
table AliveCheck {
    time: long;
    sequenceNumber: int;
}

// Response to an AliveCheck
table AliveResponse {
    time: long;                    // Time when response sent
    sequenceNumber: int;           // response sequence number
    timeReceived: long;            // Time code in the AliveCheck that caused this response
    sequenceNumberReceived: int;   // Sequence number in AliveCheck that caused this response
}

// ===============================================

union BasilServerMsgMsg {
    AddEntity,
    RemoveEntity,
    AddInstance,
    RemoveInstance,
    GetUniqueInstanceId,
    UpdateEntityProperty,
    UpdateInstanceProperty,
    UpdateInstancePosition,
    EntityPropertyRequest,
    InstancePropertyRequest,
    OpenSession,
    CloseSession,
    AliveCheck,
    AliveResponse
}

table BasilServerMsg {
    BTransportHdr: BTransportHdrStruct;
    Msg: BasilServerMsgMsg;
}
