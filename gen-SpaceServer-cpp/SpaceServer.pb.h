// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpaceServer.proto

#ifndef PROTOBUF_INCLUDED_SpaceServer_2eproto
#define PROTOBUF_INCLUDED_SpaceServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google
#include "BasilTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SpaceServer_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_SpaceServer_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_SpaceServer_2eproto();
namespace SpaceServer {
class CameraViewReq;
class CameraViewReqDefaultTypeInternal;
extern CameraViewReqDefaultTypeInternal _CameraViewReq_default_instance_;
class CameraViewResp;
class CameraViewRespDefaultTypeInternal;
extern CameraViewRespDefaultTypeInternal _CameraViewResp_default_instance_;
class CloseSessionReq;
class CloseSessionReqDefaultTypeInternal;
extern CloseSessionReqDefaultTypeInternal _CloseSessionReq_default_instance_;
class CloseSessionResp;
class CloseSessionRespDefaultTypeInternal;
extern CloseSessionRespDefaultTypeInternal _CloseSessionResp_default_instance_;
class OpenSessionReq;
class OpenSessionReqDefaultTypeInternal;
extern OpenSessionReqDefaultTypeInternal _OpenSessionReq_default_instance_;
class OpenSessionReq_FeaturesEntry_DoNotUse;
class OpenSessionReq_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern OpenSessionReq_FeaturesEntry_DoNotUseDefaultTypeInternal _OpenSessionReq_FeaturesEntry_DoNotUse_default_instance_;
class OpenSessionResp;
class OpenSessionRespDefaultTypeInternal;
extern OpenSessionRespDefaultTypeInternal _OpenSessionResp_default_instance_;
class OpenSessionResp_PropertiesEntry_DoNotUse;
class OpenSessionResp_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern OpenSessionResp_PropertiesEntry_DoNotUseDefaultTypeInternal _OpenSessionResp_PropertiesEntry_DoNotUse_default_instance_;
}  // namespace SpaceServer
namespace google {
namespace protobuf {
template<> ::SpaceServer::CameraViewReq* Arena::CreateMaybeMessage<::SpaceServer::CameraViewReq>(Arena*);
template<> ::SpaceServer::CameraViewResp* Arena::CreateMaybeMessage<::SpaceServer::CameraViewResp>(Arena*);
template<> ::SpaceServer::CloseSessionReq* Arena::CreateMaybeMessage<::SpaceServer::CloseSessionReq>(Arena*);
template<> ::SpaceServer::CloseSessionResp* Arena::CreateMaybeMessage<::SpaceServer::CloseSessionResp>(Arena*);
template<> ::SpaceServer::OpenSessionReq* Arena::CreateMaybeMessage<::SpaceServer::OpenSessionReq>(Arena*);
template<> ::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse>(Arena*);
template<> ::SpaceServer::OpenSessionResp* Arena::CreateMaybeMessage<::SpaceServer::OpenSessionResp>(Arena*);
template<> ::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SpaceServer {

// ===================================================================

class CameraViewReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpaceServer.CameraViewReq) */ {
 public:
  CameraViewReq();
  virtual ~CameraViewReq();

  CameraViewReq(const CameraViewReq& from);

  inline CameraViewReq& operator=(const CameraViewReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraViewReq(CameraViewReq&& from) noexcept
    : CameraViewReq() {
    *this = ::std::move(from);
  }

  inline CameraViewReq& operator=(CameraViewReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CameraViewReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraViewReq* internal_default_instance() {
    return reinterpret_cast<const CameraViewReq*>(
               &_CameraViewReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CameraViewReq* other);
  friend void swap(CameraViewReq& a, CameraViewReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraViewReq* New() const final {
    return CreateMaybeMessage<CameraViewReq>(nullptr);
  }

  CameraViewReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraViewReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraViewReq& from);
  void MergeFrom(const CameraViewReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraViewReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "SpaceServer.CameraViewReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:SpaceServer.CameraViewReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SpaceServer_2eproto;
};
// -------------------------------------------------------------------

class CameraViewResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpaceServer.CameraViewResp) */ {
 public:
  CameraViewResp();
  virtual ~CameraViewResp();

  CameraViewResp(const CameraViewResp& from);

  inline CameraViewResp& operator=(const CameraViewResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CameraViewResp(CameraViewResp&& from) noexcept
    : CameraViewResp() {
    *this = ::std::move(from);
  }

  inline CameraViewResp& operator=(CameraViewResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CameraViewResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraViewResp* internal_default_instance() {
    return reinterpret_cast<const CameraViewResp*>(
               &_CameraViewResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CameraViewResp* other);
  friend void swap(CameraViewResp& a, CameraViewResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CameraViewResp* New() const final {
    return CreateMaybeMessage<CameraViewResp>(nullptr);
  }

  CameraViewResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CameraViewResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CameraViewResp& from);
  void MergeFrom(const CameraViewResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraViewResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "SpaceServer.CameraViewResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:SpaceServer.CameraViewResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SpaceServer_2eproto;
};
// -------------------------------------------------------------------

class OpenSessionReq_FeaturesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<OpenSessionReq_FeaturesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<OpenSessionReq_FeaturesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  OpenSessionReq_FeaturesEntry_DoNotUse();
  OpenSessionReq_FeaturesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const OpenSessionReq_FeaturesEntry_DoNotUse& other);
  static const OpenSessionReq_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpenSessionReq_FeaturesEntry_DoNotUse*>(&_OpenSessionReq_FeaturesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class OpenSessionReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpaceServer.OpenSessionReq) */ {
 public:
  OpenSessionReq();
  virtual ~OpenSessionReq();

  OpenSessionReq(const OpenSessionReq& from);

  inline OpenSessionReq& operator=(const OpenSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSessionReq(OpenSessionReq&& from) noexcept
    : OpenSessionReq() {
    *this = ::std::move(from);
  }

  inline OpenSessionReq& operator=(OpenSessionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OpenSessionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSessionReq* internal_default_instance() {
    return reinterpret_cast<const OpenSessionReq*>(
               &_OpenSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OpenSessionReq* other);
  friend void swap(OpenSessionReq& a, OpenSessionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSessionReq* New() const final {
    return CreateMaybeMessage<OpenSessionReq>(nullptr);
  }

  OpenSessionReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSessionReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSessionReq& from);
  void MergeFrom(const OpenSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSessionReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "SpaceServer.OpenSessionReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> features = 2;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      features() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_features();

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:SpaceServer.OpenSessionReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      OpenSessionReq_FeaturesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > features_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SpaceServer_2eproto;
};
// -------------------------------------------------------------------

class OpenSessionResp_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<OpenSessionResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<OpenSessionResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  OpenSessionResp_PropertiesEntry_DoNotUse();
  OpenSessionResp_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const OpenSessionResp_PropertiesEntry_DoNotUse& other);
  static const OpenSessionResp_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OpenSessionResp_PropertiesEntry_DoNotUse*>(&_OpenSessionResp_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class OpenSessionResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpaceServer.OpenSessionResp) */ {
 public:
  OpenSessionResp();
  virtual ~OpenSessionResp();

  OpenSessionResp(const OpenSessionResp& from);

  inline OpenSessionResp& operator=(const OpenSessionResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenSessionResp(OpenSessionResp&& from) noexcept
    : OpenSessionResp() {
    *this = ::std::move(from);
  }

  inline OpenSessionResp& operator=(OpenSessionResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OpenSessionResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenSessionResp* internal_default_instance() {
    return reinterpret_cast<const OpenSessionResp*>(
               &_OpenSessionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OpenSessionResp* other);
  friend void swap(OpenSessionResp& a, OpenSessionResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenSessionResp* New() const final {
    return CreateMaybeMessage<OpenSessionResp>(nullptr);
  }

  OpenSessionResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenSessionResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenSessionResp& from);
  void MergeFrom(const OpenSessionResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenSessionResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "SpaceServer.OpenSessionResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> properties = 2;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:SpaceServer.OpenSessionResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      OpenSessionResp_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SpaceServer_2eproto;
};
// -------------------------------------------------------------------

class CloseSessionReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpaceServer.CloseSessionReq) */ {
 public:
  CloseSessionReq();
  virtual ~CloseSessionReq();

  CloseSessionReq(const CloseSessionReq& from);

  inline CloseSessionReq& operator=(const CloseSessionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseSessionReq(CloseSessionReq&& from) noexcept
    : CloseSessionReq() {
    *this = ::std::move(from);
  }

  inline CloseSessionReq& operator=(CloseSessionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloseSessionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseSessionReq* internal_default_instance() {
    return reinterpret_cast<const CloseSessionReq*>(
               &_CloseSessionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CloseSessionReq* other);
  friend void swap(CloseSessionReq& a, CloseSessionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseSessionReq* New() const final {
    return CreateMaybeMessage<CloseSessionReq>(nullptr);
  }

  CloseSessionReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloseSessionReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloseSessionReq& from);
  void MergeFrom(const CloseSessionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseSessionReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "SpaceServer.CloseSessionReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:SpaceServer.CloseSessionReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SpaceServer_2eproto;
};
// -------------------------------------------------------------------

class CloseSessionResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SpaceServer.CloseSessionResp) */ {
 public:
  CloseSessionResp();
  virtual ~CloseSessionResp();

  CloseSessionResp(const CloseSessionResp& from);

  inline CloseSessionResp& operator=(const CloseSessionResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloseSessionResp(CloseSessionResp&& from) noexcept
    : CloseSessionResp() {
    *this = ::std::move(from);
  }

  inline CloseSessionResp& operator=(CloseSessionResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloseSessionResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseSessionResp* internal_default_instance() {
    return reinterpret_cast<const CloseSessionResp*>(
               &_CloseSessionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CloseSessionResp* other);
  friend void swap(CloseSessionResp& a, CloseSessionResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloseSessionResp* New() const final {
    return CreateMaybeMessage<CloseSessionResp>(nullptr);
  }

  CloseSessionResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloseSessionResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloseSessionResp& from);
  void MergeFrom(const CloseSessionResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseSessionResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "SpaceServer.CloseSessionResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:SpaceServer.CloseSessionResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SpaceServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraViewReq

// .BasilType.AccessAuthorization auth = 1;
inline bool CameraViewReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& CameraViewReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:SpaceServer.CameraViewReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* CameraViewReq::release_auth() {
  // @@protoc_insertion_point(field_release:SpaceServer.CameraViewReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* CameraViewReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SpaceServer.CameraViewReq.auth)
  return auth_;
}
inline void CameraViewReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.CameraViewReq.auth)
}

// -------------------------------------------------------------------

// CameraViewResp

// .BasilType.BasilException exception = 1;
inline bool CameraViewResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& CameraViewResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:SpaceServer.CameraViewResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* CameraViewResp::release_exception() {
  // @@protoc_insertion_point(field_release:SpaceServer.CameraViewResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* CameraViewResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SpaceServer.CameraViewResp.exception)
  return exception_;
}
inline void CameraViewResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.CameraViewResp.exception)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OpenSessionReq

// .BasilType.AccessAuthorization auth = 1;
inline bool OpenSessionReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& OpenSessionReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:SpaceServer.OpenSessionReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* OpenSessionReq::release_auth() {
  // @@protoc_insertion_point(field_release:SpaceServer.OpenSessionReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* OpenSessionReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SpaceServer.OpenSessionReq.auth)
  return auth_;
}
inline void OpenSessionReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.OpenSessionReq.auth)
}

// map<string, string> features = 2;
inline int OpenSessionReq::features_size() const {
  return features_.size();
}
inline void OpenSessionReq::clear_features() {
  features_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
OpenSessionReq::features() const {
  // @@protoc_insertion_point(field_map:SpaceServer.OpenSessionReq.features)
  return features_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
OpenSessionReq::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:SpaceServer.OpenSessionReq.features)
  return features_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OpenSessionResp

// .BasilType.BasilException exception = 1;
inline bool OpenSessionResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& OpenSessionResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:SpaceServer.OpenSessionResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* OpenSessionResp::release_exception() {
  // @@protoc_insertion_point(field_release:SpaceServer.OpenSessionResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* OpenSessionResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SpaceServer.OpenSessionResp.exception)
  return exception_;
}
inline void OpenSessionResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.OpenSessionResp.exception)
}

// map<string, string> properties = 2;
inline int OpenSessionResp::properties_size() const {
  return properties_.size();
}
inline void OpenSessionResp::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
OpenSessionResp::properties() const {
  // @@protoc_insertion_point(field_map:SpaceServer.OpenSessionResp.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
OpenSessionResp::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:SpaceServer.OpenSessionResp.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// CloseSessionReq

// .BasilType.AccessAuthorization auth = 1;
inline bool CloseSessionReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& CloseSessionReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:SpaceServer.CloseSessionReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* CloseSessionReq::release_auth() {
  // @@protoc_insertion_point(field_release:SpaceServer.CloseSessionReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* CloseSessionReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SpaceServer.CloseSessionReq.auth)
  return auth_;
}
inline void CloseSessionReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.CloseSessionReq.auth)
}

// string reason = 2;
inline void CloseSessionReq::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloseSessionReq::reason() const {
  // @@protoc_insertion_point(field_get:SpaceServer.CloseSessionReq.reason)
  return reason_.GetNoArena();
}
inline void CloseSessionReq::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SpaceServer.CloseSessionReq.reason)
}
#if LANG_CXX11
inline void CloseSessionReq::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SpaceServer.CloseSessionReq.reason)
}
#endif
inline void CloseSessionReq::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SpaceServer.CloseSessionReq.reason)
}
inline void CloseSessionReq::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SpaceServer.CloseSessionReq.reason)
}
inline ::std::string* CloseSessionReq::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:SpaceServer.CloseSessionReq.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloseSessionReq::release_reason() {
  // @@protoc_insertion_point(field_release:SpaceServer.CloseSessionReq.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloseSessionReq::set_allocated_reason(::std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.CloseSessionReq.reason)
}

// -------------------------------------------------------------------

// CloseSessionResp

// .BasilType.BasilException exception = 1;
inline bool CloseSessionResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& CloseSessionResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:SpaceServer.CloseSessionResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* CloseSessionResp::release_exception() {
  // @@protoc_insertion_point(field_release:SpaceServer.CloseSessionResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* CloseSessionResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SpaceServer.CloseSessionResp.exception)
  return exception_;
}
inline void CloseSessionResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:SpaceServer.CloseSessionResp.exception)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SpaceServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_SpaceServer_2eproto
