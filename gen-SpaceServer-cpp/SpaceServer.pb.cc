// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpaceServer.proto

#include "SpaceServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BasilTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessAuthorization_BasilTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BasilTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BasilException_BasilTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SpaceServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSessionReq_FeaturesEntry_DoNotUse_SpaceServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SpaceServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSessionResp_PropertiesEntry_DoNotUse_SpaceServer_2eproto;
namespace SpaceServer {
class CameraViewReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraViewReq> _instance;
} _CameraViewReq_default_instance_;
class CameraViewRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraViewResp> _instance;
} _CameraViewResp_default_instance_;
class OpenSessionReq_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSessionReq_FeaturesEntry_DoNotUse> _instance;
} _OpenSessionReq_FeaturesEntry_DoNotUse_default_instance_;
class OpenSessionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSessionReq> _instance;
} _OpenSessionReq_default_instance_;
class OpenSessionResp_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSessionResp_PropertiesEntry_DoNotUse> _instance;
} _OpenSessionResp_PropertiesEntry_DoNotUse_default_instance_;
class OpenSessionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenSessionResp> _instance;
} _OpenSessionResp_default_instance_;
class CloseSessionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseSessionReq> _instance;
} _CloseSessionReq_default_instance_;
class CloseSessionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseSessionResp> _instance;
} _CloseSessionResp_default_instance_;
}  // namespace SpaceServer
static void InitDefaultsscc_info_CameraViewReq_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_CameraViewReq_default_instance_;
    new (ptr) ::SpaceServer::CameraViewReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpaceServer::CameraViewReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraViewReq_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CameraViewReq_SpaceServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_CameraViewResp_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_CameraViewResp_default_instance_;
    new (ptr) ::SpaceServer::CameraViewResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpaceServer::CameraViewResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraViewResp_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CameraViewResp_SpaceServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_CloseSessionReq_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_CloseSessionReq_default_instance_;
    new (ptr) ::SpaceServer::CloseSessionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpaceServer::CloseSessionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CloseSessionReq_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CloseSessionReq_SpaceServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_CloseSessionResp_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_CloseSessionResp_default_instance_;
    new (ptr) ::SpaceServer::CloseSessionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpaceServer::CloseSessionResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CloseSessionResp_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CloseSessionResp_SpaceServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_OpenSessionReq_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_OpenSessionReq_default_instance_;
    new (ptr) ::SpaceServer::OpenSessionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpaceServer::OpenSessionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpenSessionReq_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OpenSessionReq_SpaceServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,
      &scc_info_OpenSessionReq_FeaturesEntry_DoNotUse_SpaceServer_2eproto.base,}};

static void InitDefaultsscc_info_OpenSessionReq_FeaturesEntry_DoNotUse_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_OpenSessionReq_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse();
  }
  ::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSessionReq_FeaturesEntry_DoNotUse_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OpenSessionReq_FeaturesEntry_DoNotUse_SpaceServer_2eproto}, {}};

static void InitDefaultsscc_info_OpenSessionResp_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_OpenSessionResp_default_instance_;
    new (ptr) ::SpaceServer::OpenSessionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SpaceServer::OpenSessionResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpenSessionResp_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OpenSessionResp_SpaceServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,
      &scc_info_OpenSessionResp_PropertiesEntry_DoNotUse_SpaceServer_2eproto.base,}};

static void InitDefaultsscc_info_OpenSessionResp_PropertiesEntry_DoNotUse_SpaceServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SpaceServer::_OpenSessionResp_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse();
  }
  ::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpenSessionResp_PropertiesEntry_DoNotUse_SpaceServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OpenSessionResp_PropertiesEntry_DoNotUse_SpaceServer_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SpaceServer_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SpaceServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SpaceServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SpaceServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CameraViewReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CameraViewReq, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CameraViewResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CameraViewResp, exception_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq, auth_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionReq, features_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp, exception_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::OpenSessionResp, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CloseSessionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CloseSessionReq, auth_),
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CloseSessionReq, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CloseSessionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SpaceServer::CloseSessionResp, exception_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SpaceServer::CameraViewReq)},
  { 6, -1, sizeof(::SpaceServer::CameraViewResp)},
  { 12, 19, sizeof(::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse)},
  { 21, -1, sizeof(::SpaceServer::OpenSessionReq)},
  { 28, 35, sizeof(::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse)},
  { 37, -1, sizeof(::SpaceServer::OpenSessionResp)},
  { 44, -1, sizeof(::SpaceServer::CloseSessionReq)},
  { 51, -1, sizeof(::SpaceServer::CloseSessionResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_CameraViewReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_CameraViewResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_OpenSessionReq_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_OpenSessionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_OpenSessionResp_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_OpenSessionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_CloseSessionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SpaceServer::_CloseSessionResp_default_instance_),
};

const char descriptor_table_protodef_SpaceServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021SpaceServer.proto\022\013SpaceServer\032\020BasilT"
  "ypes.proto\"=\n\rCameraViewReq\022,\n\004auth\030\001 \001("
  "\0132\036.BasilType.AccessAuthorization\">\n\016Cam"
  "eraViewResp\022,\n\texception\030\001 \001(\0132\031.BasilTy"
  "pe.BasilException\"\254\001\n\016OpenSessionReq\022,\n\004"
  "auth\030\001 \001(\0132\036.BasilType.AccessAuthorizati"
  "on\022;\n\010features\030\002 \003(\0132).SpaceServer.OpenS"
  "essionReq.FeaturesEntry\032/\n\rFeaturesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\264\001\n\017Ope"
  "nSessionResp\022,\n\texception\030\001 \001(\0132\031.BasilT"
  "ype.BasilException\022@\n\nproperties\030\002 \003(\0132,"
  ".SpaceServer.OpenSessionResp.PropertiesE"
  "ntry\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
  "value\030\002 \001(\t:\0028\001\"O\n\017CloseSessionReq\022,\n\004au"
  "th\030\001 \001(\0132\036.BasilType.AccessAuthorization"
  "\022\016\n\006reason\030\002 \001(\t\"@\n\020CloseSessionResp\022,\n\t"
  "exception\030\001 \001(\0132\031.BasilType.BasilExcepti"
  "on2\244\001\n\013SpaceServer\022H\n\013OpenSession\022\033.Spac"
  "eServer.OpenSessionReq\032\034.SpaceServer.Ope"
  "nSessionResp\022K\n\014CloseSession\022\034.SpaceServ"
  "er.CloseSessionReq\032\035.SpaceServer.CloseSe"
  "ssionRespB*\252\002\'org.herbal3d.basil.protoco"
  "l.SpaceServerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SpaceServer_2eproto_deps[1] = {
  &::descriptor_table_BasilTypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SpaceServer_2eproto_sccs[8] = {
  &scc_info_CameraViewReq_SpaceServer_2eproto.base,
  &scc_info_CameraViewResp_SpaceServer_2eproto.base,
  &scc_info_CloseSessionReq_SpaceServer_2eproto.base,
  &scc_info_CloseSessionResp_SpaceServer_2eproto.base,
  &scc_info_OpenSessionReq_SpaceServer_2eproto.base,
  &scc_info_OpenSessionReq_FeaturesEntry_DoNotUse_SpaceServer_2eproto.base,
  &scc_info_OpenSessionResp_SpaceServer_2eproto.base,
  &scc_info_OpenSessionResp_PropertiesEntry_DoNotUse_SpaceServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SpaceServer_2eproto_once;
static bool descriptor_table_SpaceServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SpaceServer_2eproto = {
  &descriptor_table_SpaceServer_2eproto_initialized, descriptor_table_protodef_SpaceServer_2eproto, "SpaceServer.proto", 901,
  &descriptor_table_SpaceServer_2eproto_once, descriptor_table_SpaceServer_2eproto_sccs, descriptor_table_SpaceServer_2eproto_deps, 8, 1,
  schemas, file_default_instances, TableStruct_SpaceServer_2eproto::offsets,
  file_level_metadata_SpaceServer_2eproto, 8, file_level_enum_descriptors_SpaceServer_2eproto, file_level_service_descriptors_SpaceServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SpaceServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SpaceServer_2eproto), true);
namespace SpaceServer {

// ===================================================================

void CameraViewReq::InitAsDefaultInstance() {
  ::SpaceServer::_CameraViewReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class CameraViewReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const CameraViewReq* msg);
};

const ::BasilType::AccessAuthorization&
CameraViewReq::HasBitSetters::auth(const CameraViewReq* msg) {
  return *msg->auth_;
}
void CameraViewReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraViewReq::kAuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraViewReq::CameraViewReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpaceServer.CameraViewReq)
}
CameraViewReq::CameraViewReq(const CameraViewReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpaceServer.CameraViewReq)
}

void CameraViewReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraViewReq_SpaceServer_2eproto.base);
  auth_ = nullptr;
}

CameraViewReq::~CameraViewReq() {
  // @@protoc_insertion_point(destructor:SpaceServer.CameraViewReq)
  SharedDtor();
}

void CameraViewReq::SharedDtor() {
  if (this != internal_default_instance()) delete auth_;
}

void CameraViewReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraViewReq& CameraViewReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraViewReq_SpaceServer_2eproto.base);
  return *internal_default_instance();
}


void CameraViewReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceServer.CameraViewReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraViewReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraViewReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpaceServer.CameraViewReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpaceServer.CameraViewReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpaceServer.CameraViewReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraViewReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpaceServer.CameraViewReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpaceServer.CameraViewReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraViewReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceServer.CameraViewReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceServer.CameraViewReq)
  return target;
}

size_t CameraViewReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceServer.CameraViewReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraViewReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpaceServer.CameraViewReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraViewReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraViewReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpaceServer.CameraViewReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpaceServer.CameraViewReq)
    MergeFrom(*source);
  }
}

void CameraViewReq::MergeFrom(const CameraViewReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceServer.CameraViewReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void CameraViewReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpaceServer.CameraViewReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraViewReq::CopyFrom(const CameraViewReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceServer.CameraViewReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraViewReq::IsInitialized() const {
  return true;
}

void CameraViewReq::Swap(CameraViewReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraViewReq::InternalSwap(CameraViewReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraViewReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraViewResp::InitAsDefaultInstance() {
  ::SpaceServer::_CameraViewResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class CameraViewResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const CameraViewResp* msg);
};

const ::BasilType::BasilException&
CameraViewResp::HasBitSetters::exception(const CameraViewResp* msg) {
  return *msg->exception_;
}
void CameraViewResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraViewResp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraViewResp::CameraViewResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpaceServer.CameraViewResp)
}
CameraViewResp::CameraViewResp(const CameraViewResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpaceServer.CameraViewResp)
}

void CameraViewResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraViewResp_SpaceServer_2eproto.base);
  exception_ = nullptr;
}

CameraViewResp::~CameraViewResp() {
  // @@protoc_insertion_point(destructor:SpaceServer.CameraViewResp)
  SharedDtor();
}

void CameraViewResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void CameraViewResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraViewResp& CameraViewResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraViewResp_SpaceServer_2eproto.base);
  return *internal_default_instance();
}


void CameraViewResp::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceServer.CameraViewResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraViewResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraViewResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpaceServer.CameraViewResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpaceServer.CameraViewResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpaceServer.CameraViewResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraViewResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpaceServer.CameraViewResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpaceServer.CameraViewResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraViewResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceServer.CameraViewResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceServer.CameraViewResp)
  return target;
}

size_t CameraViewResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceServer.CameraViewResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraViewResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpaceServer.CameraViewResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraViewResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraViewResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpaceServer.CameraViewResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpaceServer.CameraViewResp)
    MergeFrom(*source);
  }
}

void CameraViewResp::MergeFrom(const CameraViewResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceServer.CameraViewResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void CameraViewResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpaceServer.CameraViewResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraViewResp::CopyFrom(const CameraViewResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceServer.CameraViewResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraViewResp::IsInitialized() const {
  return true;
}

void CameraViewResp::Swap(CameraViewResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraViewResp::InternalSwap(CameraViewResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraViewResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OpenSessionReq_FeaturesEntry_DoNotUse::OpenSessionReq_FeaturesEntry_DoNotUse() {}
OpenSessionReq_FeaturesEntry_DoNotUse::OpenSessionReq_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpenSessionReq_FeaturesEntry_DoNotUse::MergeFrom(const OpenSessionReq_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpenSessionReq_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OpenSessionReq_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OpenSessionReq::InitAsDefaultInstance() {
  ::SpaceServer::_OpenSessionReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class OpenSessionReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const OpenSessionReq* msg);
};

const ::BasilType::AccessAuthorization&
OpenSessionReq::HasBitSetters::auth(const OpenSessionReq* msg) {
  return *msg->auth_;
}
void OpenSessionReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSessionReq::kAuthFieldNumber;
const int OpenSessionReq::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSessionReq::OpenSessionReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpaceServer.OpenSessionReq)
}
OpenSessionReq::OpenSessionReq(const OpenSessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpaceServer.OpenSessionReq)
}

void OpenSessionReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenSessionReq_SpaceServer_2eproto.base);
  auth_ = nullptr;
}

OpenSessionReq::~OpenSessionReq() {
  // @@protoc_insertion_point(destructor:SpaceServer.OpenSessionReq)
  SharedDtor();
}

void OpenSessionReq::SharedDtor() {
  if (this != internal_default_instance()) delete auth_;
}

void OpenSessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSessionReq& OpenSessionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSessionReq_SpaceServer_2eproto.base);
  return *internal_default_instance();
}


void OpenSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceServer.OpenSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenSessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenSessionReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpaceServer.OpenSessionReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> features = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          OpenSessionReq_FeaturesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              OpenSessionReq_FeaturesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&features_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpaceServer.OpenSessionReq.FeaturesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpaceServer.OpenSessionReq.FeaturesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpaceServer.OpenSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpaceServer.OpenSessionReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenSessionReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpaceServer.OpenSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // map<string, string> features = 2;
  if (!this->features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionReq.FeaturesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionReq.FeaturesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        OpenSessionReq_FeaturesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        OpenSessionReq_FeaturesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpaceServer.OpenSessionReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSessionReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceServer.OpenSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // map<string, string> features = 2;
  if (!this->features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionReq.FeaturesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionReq.FeaturesEntry.value");
      }
    };

    if (false &&
        this->features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpenSessionReq_FeaturesEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        target = OpenSessionReq_FeaturesEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceServer.OpenSessionReq)
  return target;
}

size_t OpenSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceServer.OpenSessionReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> features = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->features().begin();
      it != this->features().end(); ++it) {
    total_size += OpenSessionReq_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSessionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpaceServer.OpenSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSessionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSessionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpaceServer.OpenSessionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpaceServer.OpenSessionReq)
    MergeFrom(*source);
  }
}

void OpenSessionReq::MergeFrom(const OpenSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceServer.OpenSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void OpenSessionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpaceServer.OpenSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSessionReq::CopyFrom(const OpenSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceServer.OpenSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSessionReq::IsInitialized() const {
  return true;
}

void OpenSessionReq::Swap(OpenSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSessionReq::InternalSwap(OpenSessionReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.Swap(&other->features_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSessionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

OpenSessionResp_PropertiesEntry_DoNotUse::OpenSessionResp_PropertiesEntry_DoNotUse() {}
OpenSessionResp_PropertiesEntry_DoNotUse::OpenSessionResp_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OpenSessionResp_PropertiesEntry_DoNotUse::MergeFrom(const OpenSessionResp_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OpenSessionResp_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void OpenSessionResp_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void OpenSessionResp::InitAsDefaultInstance() {
  ::SpaceServer::_OpenSessionResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class OpenSessionResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const OpenSessionResp* msg);
};

const ::BasilType::BasilException&
OpenSessionResp::HasBitSetters::exception(const OpenSessionResp* msg) {
  return *msg->exception_;
}
void OpenSessionResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenSessionResp::kExceptionFieldNumber;
const int OpenSessionResp::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenSessionResp::OpenSessionResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpaceServer.OpenSessionResp)
}
OpenSessionResp::OpenSessionResp(const OpenSessionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpaceServer.OpenSessionResp)
}

void OpenSessionResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenSessionResp_SpaceServer_2eproto.base);
  exception_ = nullptr;
}

OpenSessionResp::~OpenSessionResp() {
  // @@protoc_insertion_point(destructor:SpaceServer.OpenSessionResp)
  SharedDtor();
}

void OpenSessionResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void OpenSessionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenSessionResp& OpenSessionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenSessionResp_SpaceServer_2eproto.base);
  return *internal_default_instance();
}


void OpenSessionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceServer.OpenSessionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OpenSessionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OpenSessionResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpaceServer.OpenSessionResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          OpenSessionResp_PropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              OpenSessionResp_PropertiesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpaceServer.OpenSessionResp.PropertiesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpaceServer.OpenSessionResp.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpaceServer.OpenSessionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpaceServer.OpenSessionResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OpenSessionResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpaceServer.OpenSessionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  // map<string, string> properties = 2;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionResp.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        OpenSessionResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        OpenSessionResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpaceServer.OpenSessionResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenSessionResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceServer.OpenSessionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  // map<string, string> properties = 2;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "SpaceServer.OpenSessionResp.PropertiesEntry.value");
      }
    };

    if (false &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = OpenSessionResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        target = OpenSessionResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceServer.OpenSessionResp)
  return target;
}

size_t OpenSessionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceServer.OpenSessionResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->properties().begin();
      it != this->properties().end(); ++it) {
    total_size += OpenSessionResp_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenSessionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpaceServer.OpenSessionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenSessionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenSessionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpaceServer.OpenSessionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpaceServer.OpenSessionResp)
    MergeFrom(*source);
  }
}

void OpenSessionResp::MergeFrom(const OpenSessionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceServer.OpenSessionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void OpenSessionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpaceServer.OpenSessionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSessionResp::CopyFrom(const OpenSessionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceServer.OpenSessionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSessionResp::IsInitialized() const {
  return true;
}

void OpenSessionResp::Swap(OpenSessionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenSessionResp::InternalSwap(OpenSessionResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenSessionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseSessionReq::InitAsDefaultInstance() {
  ::SpaceServer::_CloseSessionReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class CloseSessionReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const CloseSessionReq* msg);
};

const ::BasilType::AccessAuthorization&
CloseSessionReq::HasBitSetters::auth(const CloseSessionReq* msg) {
  return *msg->auth_;
}
void CloseSessionReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseSessionReq::kAuthFieldNumber;
const int CloseSessionReq::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseSessionReq::CloseSessionReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpaceServer.CloseSessionReq)
}
CloseSessionReq::CloseSessionReq(const CloseSessionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpaceServer.CloseSessionReq)
}

void CloseSessionReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseSessionReq_SpaceServer_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_ = nullptr;
}

CloseSessionReq::~CloseSessionReq() {
  // @@protoc_insertion_point(destructor:SpaceServer.CloseSessionReq)
  SharedDtor();
}

void CloseSessionReq::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void CloseSessionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseSessionReq& CloseSessionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseSessionReq_SpaceServer_2eproto.base);
  return *internal_default_instance();
}


void CloseSessionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceServer.CloseSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseSessionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "SpaceServer.CloseSessionReq.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseSessionReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpaceServer.CloseSessionReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "SpaceServer.CloseSessionReq.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpaceServer.CloseSessionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpaceServer.CloseSessionReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseSessionReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpaceServer.CloseSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpaceServer.CloseSessionReq.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpaceServer.CloseSessionReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseSessionReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceServer.CloseSessionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // string reason = 2;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SpaceServer.CloseSessionReq.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceServer.CloseSessionReq)
  return target;
}

size_t CloseSessionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceServer.CloseSessionReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseSessionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpaceServer.CloseSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseSessionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseSessionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpaceServer.CloseSessionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpaceServer.CloseSessionReq)
    MergeFrom(*source);
  }
}

void CloseSessionReq::MergeFrom(const CloseSessionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceServer.CloseSessionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void CloseSessionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpaceServer.CloseSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionReq::CopyFrom(const CloseSessionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceServer.CloseSessionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionReq::IsInitialized() const {
  return true;
}

void CloseSessionReq::Swap(CloseSessionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseSessionReq::InternalSwap(CloseSessionReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseSessionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseSessionResp::InitAsDefaultInstance() {
  ::SpaceServer::_CloseSessionResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class CloseSessionResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const CloseSessionResp* msg);
};

const ::BasilType::BasilException&
CloseSessionResp::HasBitSetters::exception(const CloseSessionResp* msg) {
  return *msg->exception_;
}
void CloseSessionResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloseSessionResp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloseSessionResp::CloseSessionResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SpaceServer.CloseSessionResp)
}
CloseSessionResp::CloseSessionResp(const CloseSessionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:SpaceServer.CloseSessionResp)
}

void CloseSessionResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseSessionResp_SpaceServer_2eproto.base);
  exception_ = nullptr;
}

CloseSessionResp::~CloseSessionResp() {
  // @@protoc_insertion_point(destructor:SpaceServer.CloseSessionResp)
  SharedDtor();
}

void CloseSessionResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void CloseSessionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseSessionResp& CloseSessionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseSessionResp_SpaceServer_2eproto.base);
  return *internal_default_instance();
}


void CloseSessionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:SpaceServer.CloseSessionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloseSessionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloseSessionResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SpaceServer.CloseSessionResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SpaceServer.CloseSessionResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SpaceServer.CloseSessionResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloseSessionResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SpaceServer.CloseSessionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SpaceServer.CloseSessionResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseSessionResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SpaceServer.CloseSessionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SpaceServer.CloseSessionResp)
  return target;
}

size_t CloseSessionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SpaceServer.CloseSessionResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseSessionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SpaceServer.CloseSessionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseSessionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseSessionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SpaceServer.CloseSessionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SpaceServer.CloseSessionResp)
    MergeFrom(*source);
  }
}

void CloseSessionResp::MergeFrom(const CloseSessionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SpaceServer.CloseSessionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void CloseSessionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SpaceServer.CloseSessionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseSessionResp::CopyFrom(const CloseSessionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SpaceServer.CloseSessionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionResp::IsInitialized() const {
  return true;
}

void CloseSessionResp::Swap(CloseSessionResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloseSessionResp::InternalSwap(CloseSessionResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseSessionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SpaceServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SpaceServer::CameraViewReq* Arena::CreateMaybeMessage< ::SpaceServer::CameraViewReq >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::CameraViewReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::CameraViewResp* Arena::CreateMaybeMessage< ::SpaceServer::CameraViewResp >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::CameraViewResp >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::OpenSessionReq_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::OpenSessionReq* Arena::CreateMaybeMessage< ::SpaceServer::OpenSessionReq >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::OpenSessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::OpenSessionResp_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::OpenSessionResp* Arena::CreateMaybeMessage< ::SpaceServer::OpenSessionResp >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::OpenSessionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::CloseSessionReq* Arena::CreateMaybeMessage< ::SpaceServer::CloseSessionReq >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::CloseSessionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::SpaceServer::CloseSessionResp* Arena::CreateMaybeMessage< ::SpaceServer::CloseSessionResp >(Arena* arena) {
  return Arena::CreateInternal< ::SpaceServer::CloseSessionResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
