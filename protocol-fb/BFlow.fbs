/*
 * Table that is included in messages that need tracing, flow control,
 *    and/or debugging.
 */

include "BasilServer.fbs";

namespace org.herbal3d.protocol.basil;

// Track and message with timing and sequence numbers
table BFlowSeqStruct {
    sequenceNum: int;          // sequence number for this message
    stream: int;               // stream message is in (if handling multiple streams)
    queueTime: long;           // when the message was queued for sending
    sendTime: long;            // when the message was actually given to the network driver
}

// Tie a request with a response
table BFlowRequestStruct {
    session: int;              // unique number to link response to request
    sessionKey: string;        // a key used to verify the response
}

// Information for tracing and debugging message streams and apps
table BFlowTraceStruct {
    // See "https://github.com/openzipkin/b3-propagation" for Zipkin trace description
    traceID: long;
    parentSpanID: long;
    spanID: long;
    sampled: bool;
}

// ===============================================

union BFlowMsgMsg {
    server.AddEntity,
    server.RemoveEntity,
    server.AddInstance,
    server.RemoveInstance,
    server.GetUniqueInstanceId,
    server.GetUniqueInstanceIdResponse,
    server.UpdateEntityProperty,
    server.UpdateInstanceProperty,
    server.UpdateInstancePosition,
    server.EntityPropertyRequest,
    server.EntityPropertyResponse,
    server.InstancePropertyRequest,
    server.InstancePropertyResponse,
    server.OpenSession,
    server.OpenSessionResponse,
    server.CloseSession,
    server.AliveCheck,
    server.AliveResponse
}

table FlowMsg {
    seq: BFlowSeqStruct;
    responseRequested: BFlowRequestStruct;
    auth: accessAuthorization;
    trace: BFlowTraceStruct;
    msg: BFlowMsgMsg;
}
