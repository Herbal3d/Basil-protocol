// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AliveCheck.proto

#include "AliveCheck.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BasilTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessAuthorization_BasilTypes_2eproto;
namespace AliveCheck {
class AliveCheckReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AliveCheckReq> _instance;
} _AliveCheckReq_default_instance_;
class AliveCheckRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AliveCheckResp> _instance;
} _AliveCheckResp_default_instance_;
}  // namespace AliveCheck
static void InitDefaultsscc_info_AliveCheckReq_AliveCheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AliveCheck::_AliveCheckReq_default_instance_;
    new (ptr) ::AliveCheck::AliveCheckReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AliveCheck::AliveCheckReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AliveCheckReq_AliveCheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AliveCheckReq_AliveCheck_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_AliveCheckResp_AliveCheck_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AliveCheck::_AliveCheckResp_default_instance_;
    new (ptr) ::AliveCheck::AliveCheckResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AliveCheck::AliveCheckResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AliveCheckResp_AliveCheck_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AliveCheckResp_AliveCheck_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AliveCheck_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AliveCheck_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AliveCheck_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AliveCheck_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckReq, auth_),
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckReq, time_),
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckReq, sequencenum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckResp, time_),
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckResp, sequencenum_),
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckResp, timereceived_),
  PROTOBUF_FIELD_OFFSET(::AliveCheck::AliveCheckResp, sequencenumreceived_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AliveCheck::AliveCheckReq)},
  { 8, -1, sizeof(::AliveCheck::AliveCheckResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AliveCheck::_AliveCheckReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AliveCheck::_AliveCheckResp_default_instance_),
};

const char descriptor_table_protodef_AliveCheck_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020AliveCheck.proto\022\nAliveCheck\032\020BasilTyp"
  "es.proto\"`\n\rAliveCheckReq\022,\n\004auth\030\001 \001(\0132"
  "\036.BasilType.AccessAuthorization\022\014\n\004time\030"
  "\002 \001(\004\022\023\n\013sequenceNum\030\003 \001(\005\"f\n\016AliveCheck"
  "Resp\022\014\n\004time\030\001 \001(\004\022\023\n\013sequenceNum\030\002 \001(\005\022"
  "\024\n\014timeReceived\030\003 \001(\004\022\033\n\023sequenceNumRece"
  "ived\030\004 \001(\005B)\252\002&org.herbal3d.basil.protoc"
  "ol.AliveCheckb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AliveCheck_2eproto_deps[1] = {
  &::descriptor_table_BasilTypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AliveCheck_2eproto_sccs[2] = {
  &scc_info_AliveCheckReq_AliveCheck_2eproto.base,
  &scc_info_AliveCheckResp_AliveCheck_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AliveCheck_2eproto_once;
static bool descriptor_table_AliveCheck_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AliveCheck_2eproto = {
  &descriptor_table_AliveCheck_2eproto_initialized, descriptor_table_protodef_AliveCheck_2eproto, "AliveCheck.proto", 301,
  &descriptor_table_AliveCheck_2eproto_once, descriptor_table_AliveCheck_2eproto_sccs, descriptor_table_AliveCheck_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_AliveCheck_2eproto::offsets,
  file_level_metadata_AliveCheck_2eproto, 2, file_level_enum_descriptors_AliveCheck_2eproto, file_level_service_descriptors_AliveCheck_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AliveCheck_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AliveCheck_2eproto), true);
namespace AliveCheck {

// ===================================================================

void AliveCheckReq::InitAsDefaultInstance() {
  ::AliveCheck::_AliveCheckReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class AliveCheckReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const AliveCheckReq* msg);
};

const ::BasilType::AccessAuthorization&
AliveCheckReq::HasBitSetters::auth(const AliveCheckReq* msg) {
  return *msg->auth_;
}
void AliveCheckReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveCheckReq::kAuthFieldNumber;
const int AliveCheckReq::kTimeFieldNumber;
const int AliveCheckReq::kSequenceNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveCheckReq::AliveCheckReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AliveCheck.AliveCheckReq)
}
AliveCheckReq::AliveCheckReq(const AliveCheckReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequencenum_) -
    reinterpret_cast<char*>(&time_)) + sizeof(sequencenum_));
  // @@protoc_insertion_point(copy_constructor:AliveCheck.AliveCheckReq)
}

void AliveCheckReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AliveCheckReq_AliveCheck_2eproto.base);
  ::memset(&auth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequencenum_) -
      reinterpret_cast<char*>(&auth_)) + sizeof(sequencenum_));
}

AliveCheckReq::~AliveCheckReq() {
  // @@protoc_insertion_point(destructor:AliveCheck.AliveCheckReq)
  SharedDtor();
}

void AliveCheckReq::SharedDtor() {
  if (this != internal_default_instance()) delete auth_;
}

void AliveCheckReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AliveCheckReq& AliveCheckReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AliveCheckReq_AliveCheck_2eproto.base);
  return *internal_default_instance();
}


void AliveCheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:AliveCheck.AliveCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequencenum_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sequencenum_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AliveCheckReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequenceNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sequencenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AliveCheckReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AliveCheck.AliveCheckReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sequenceNum = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequencenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AliveCheck.AliveCheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AliveCheck.AliveCheckReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AliveCheckReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AliveCheck.AliveCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // int32 sequenceNum = 3;
  if (this->sequencenum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->sequencenum(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AliveCheck.AliveCheckReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* AliveCheckReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AliveCheck.AliveCheckReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // int32 sequenceNum = 3;
  if (this->sequencenum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->sequencenum(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AliveCheck.AliveCheckReq)
  return target;
}

size_t AliveCheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AliveCheck.AliveCheckReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  // uint64 time = 2;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // int32 sequenceNum = 3;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sequencenum());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AliveCheckReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AliveCheck.AliveCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const AliveCheckReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AliveCheckReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AliveCheck.AliveCheckReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AliveCheck.AliveCheckReq)
    MergeFrom(*source);
  }
}

void AliveCheckReq::MergeFrom(const AliveCheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AliveCheck.AliveCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.sequencenum() != 0) {
    set_sequencenum(from.sequencenum());
  }
}

void AliveCheckReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AliveCheck.AliveCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveCheckReq::CopyFrom(const AliveCheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AliveCheck.AliveCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveCheckReq::IsInitialized() const {
  return true;
}

void AliveCheckReq::Swap(AliveCheckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveCheckReq::InternalSwap(AliveCheckReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(auth_, other->auth_);
  swap(time_, other->time_);
  swap(sequencenum_, other->sequencenum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AliveCheckReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AliveCheckResp::InitAsDefaultInstance() {
}
class AliveCheckResp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AliveCheckResp::kTimeFieldNumber;
const int AliveCheckResp::kSequenceNumFieldNumber;
const int AliveCheckResp::kTimeReceivedFieldNumber;
const int AliveCheckResp::kSequenceNumReceivedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AliveCheckResp::AliveCheckResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AliveCheck.AliveCheckResp)
}
AliveCheckResp::AliveCheckResp(const AliveCheckResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequencenumreceived_) -
    reinterpret_cast<char*>(&time_)) + sizeof(sequencenumreceived_));
  // @@protoc_insertion_point(copy_constructor:AliveCheck.AliveCheckResp)
}

void AliveCheckResp::SharedCtor() {
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequencenumreceived_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sequencenumreceived_));
}

AliveCheckResp::~AliveCheckResp() {
  // @@protoc_insertion_point(destructor:AliveCheck.AliveCheckResp)
  SharedDtor();
}

void AliveCheckResp::SharedDtor() {
}

void AliveCheckResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AliveCheckResp& AliveCheckResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AliveCheckResp_AliveCheck_2eproto.base);
  return *internal_default_instance();
}


void AliveCheckResp::Clear() {
// @@protoc_insertion_point(message_clear_start:AliveCheck.AliveCheckResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequencenumreceived_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sequencenumreceived_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AliveCheckResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequenceNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequencenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeReceived = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timereceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sequenceNumReceived = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sequencenumreceived_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AliveCheckResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AliveCheck.AliveCheckResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sequenceNum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequencenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timeReceived = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timereceived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sequenceNumReceived = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequencenumreceived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AliveCheck.AliveCheckResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AliveCheck.AliveCheckResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AliveCheckResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AliveCheck.AliveCheckResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // int32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->sequencenum(), output);
  }

  // uint64 timeReceived = 3;
  if (this->timereceived() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->timereceived(), output);
  }

  // int32 sequenceNumReceived = 4;
  if (this->sequencenumreceived() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->sequencenumreceived(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AliveCheck.AliveCheckResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* AliveCheckResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AliveCheck.AliveCheckResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // int32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->sequencenum(), target);
  }

  // uint64 timeReceived = 3;
  if (this->timereceived() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->timereceived(), target);
  }

  // int32 sequenceNumReceived = 4;
  if (this->sequencenumreceived() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->sequencenumreceived(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AliveCheck.AliveCheckResp)
  return target;
}

size_t AliveCheckResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AliveCheck.AliveCheckResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // uint64 timeReceived = 3;
  if (this->timereceived() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timereceived());
  }

  // int32 sequenceNum = 2;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sequencenum());
  }

  // int32 sequenceNumReceived = 4;
  if (this->sequencenumreceived() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sequencenumreceived());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AliveCheckResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AliveCheck.AliveCheckResp)
  GOOGLE_DCHECK_NE(&from, this);
  const AliveCheckResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AliveCheckResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AliveCheck.AliveCheckResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AliveCheck.AliveCheckResp)
    MergeFrom(*source);
  }
}

void AliveCheckResp::MergeFrom(const AliveCheckResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AliveCheck.AliveCheckResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.timereceived() != 0) {
    set_timereceived(from.timereceived());
  }
  if (from.sequencenum() != 0) {
    set_sequencenum(from.sequencenum());
  }
  if (from.sequencenumreceived() != 0) {
    set_sequencenumreceived(from.sequencenumreceived());
  }
}

void AliveCheckResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AliveCheck.AliveCheckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AliveCheckResp::CopyFrom(const AliveCheckResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AliveCheck.AliveCheckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AliveCheckResp::IsInitialized() const {
  return true;
}

void AliveCheckResp::Swap(AliveCheckResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AliveCheckResp::InternalSwap(AliveCheckResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(time_, other->time_);
  swap(timereceived_, other->timereceived_);
  swap(sequencenum_, other->sequencenum_);
  swap(sequencenumreceived_, other->sequencenumreceived_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AliveCheckResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AliveCheck
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AliveCheck::AliveCheckReq* Arena::CreateMaybeMessage< ::AliveCheck::AliveCheckReq >(Arena* arena) {
  return Arena::CreateInternal< ::AliveCheck::AliveCheckReq >(arena);
}
template<> PROTOBUF_NOINLINE ::AliveCheck::AliveCheckResp* Arena::CreateMaybeMessage< ::AliveCheck::AliveCheckResp >(Arena* arena) {
  return Arena::CreateInternal< ::AliveCheck::AliveCheckResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
