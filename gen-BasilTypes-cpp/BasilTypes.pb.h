// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BasilTypes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_BasilTypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_BasilTypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BasilTypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_BasilTypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[18]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BasilTypes_2eproto;
namespace BasilType {
class AaBoundingBox;
class AaBoundingBoxDefaultTypeInternal;
extern AaBoundingBoxDefaultTypeInternal _AaBoundingBox_default_instance_;
class AccessAuthorization;
class AccessAuthorizationDefaultTypeInternal;
extern AccessAuthorizationDefaultTypeInternal _AccessAuthorization_default_instance_;
class AccessAuthorization_AccessPropertiesEntry_DoNotUse;
class AccessAuthorization_AccessPropertiesEntry_DoNotUseDefaultTypeInternal;
extern AccessAuthorization_AccessPropertiesEntry_DoNotUseDefaultTypeInternal _AccessAuthorization_AccessPropertiesEntry_DoNotUse_default_instance_;
class AssetInformation;
class AssetInformationDefaultTypeInternal;
extern AssetInformationDefaultTypeInternal _AssetInformation_default_instance_;
class BResponseRequest;
class BResponseRequestDefaultTypeInternal;
extern BResponseRequestDefaultTypeInternal _BResponseRequest_default_instance_;
class BasilException;
class BasilExceptionDefaultTypeInternal;
extern BasilExceptionDefaultTypeInternal _BasilException_default_instance_;
class BasilException_HintsEntry_DoNotUse;
class BasilException_HintsEntry_DoNotUseDefaultTypeInternal;
extern BasilException_HintsEntry_DoNotUseDefaultTypeInternal _BasilException_HintsEntry_DoNotUse_default_instance_;
class CoordPosition;
class CoordPositionDefaultTypeInternal;
extern CoordPositionDefaultTypeInternal _CoordPosition_default_instance_;
class DisplayableInfo;
class DisplayableInfoDefaultTypeInternal;
extern DisplayableInfoDefaultTypeInternal _DisplayableInfo_default_instance_;
class DisplayableInfo_AssetEntry_DoNotUse;
class DisplayableInfo_AssetEntry_DoNotUseDefaultTypeInternal;
extern DisplayableInfo_AssetEntry_DoNotUseDefaultTypeInternal _DisplayableInfo_AssetEntry_DoNotUse_default_instance_;
class InstanceIdentifier;
class InstanceIdentifierDefaultTypeInternal;
extern InstanceIdentifierDefaultTypeInternal _InstanceIdentifier_default_instance_;
class InstancePositionInfo;
class InstancePositionInfoDefaultTypeInternal;
extern InstancePositionInfoDefaultTypeInternal _InstancePositionInfo_default_instance_;
class ObjectIdentifier;
class ObjectIdentifierDefaultTypeInternal;
extern ObjectIdentifierDefaultTypeInternal _ObjectIdentifier_default_instance_;
class PathDescription;
class PathDescriptionDefaultTypeInternal;
extern PathDescriptionDefaultTypeInternal _PathDescription_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class TraceInfo;
class TraceInfoDefaultTypeInternal;
extern TraceInfoDefaultTypeInternal _TraceInfo_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace BasilType
PROTOBUF_NAMESPACE_OPEN
template<> ::BasilType::AaBoundingBox* Arena::CreateMaybeMessage<::BasilType::AaBoundingBox>(Arena*);
template<> ::BasilType::AccessAuthorization* Arena::CreateMaybeMessage<::BasilType::AccessAuthorization>(Arena*);
template<> ::BasilType::AccessAuthorization_AccessPropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::BasilType::AccessAuthorization_AccessPropertiesEntry_DoNotUse>(Arena*);
template<> ::BasilType::AssetInformation* Arena::CreateMaybeMessage<::BasilType::AssetInformation>(Arena*);
template<> ::BasilType::BResponseRequest* Arena::CreateMaybeMessage<::BasilType::BResponseRequest>(Arena*);
template<> ::BasilType::BasilException* Arena::CreateMaybeMessage<::BasilType::BasilException>(Arena*);
template<> ::BasilType::BasilException_HintsEntry_DoNotUse* Arena::CreateMaybeMessage<::BasilType::BasilException_HintsEntry_DoNotUse>(Arena*);
template<> ::BasilType::CoordPosition* Arena::CreateMaybeMessage<::BasilType::CoordPosition>(Arena*);
template<> ::BasilType::DisplayableInfo* Arena::CreateMaybeMessage<::BasilType::DisplayableInfo>(Arena*);
template<> ::BasilType::DisplayableInfo_AssetEntry_DoNotUse* Arena::CreateMaybeMessage<::BasilType::DisplayableInfo_AssetEntry_DoNotUse>(Arena*);
template<> ::BasilType::InstanceIdentifier* Arena::CreateMaybeMessage<::BasilType::InstanceIdentifier>(Arena*);
template<> ::BasilType::InstancePositionInfo* Arena::CreateMaybeMessage<::BasilType::InstancePositionInfo>(Arena*);
template<> ::BasilType::ObjectIdentifier* Arena::CreateMaybeMessage<::BasilType::ObjectIdentifier>(Arena*);
template<> ::BasilType::PathDescription* Arena::CreateMaybeMessage<::BasilType::PathDescription>(Arena*);
template<> ::BasilType::Quaternion* Arena::CreateMaybeMessage<::BasilType::Quaternion>(Arena*);
template<> ::BasilType::TraceInfo* Arena::CreateMaybeMessage<::BasilType::TraceInfo>(Arena*);
template<> ::BasilType::Transform* Arena::CreateMaybeMessage<::BasilType::Transform>(Arena*);
template<> ::BasilType::Vector3* Arena::CreateMaybeMessage<::BasilType::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace BasilType {

enum CoordSystem : int {
  WGS86 = 0,
  CAMERA = 1,
  CAMERAABS = 2,
  VIRTUAL = 3,
  MOON = 4,
  MARS = 5,
  REL1 = 6,
  REL2 = 7,
  REL3 = 8,
  CoordSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CoordSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CoordSystem_IsValid(int value);
constexpr CoordSystem CoordSystem_MIN = WGS86;
constexpr CoordSystem CoordSystem_MAX = REL3;
constexpr int CoordSystem_ARRAYSIZE = CoordSystem_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordSystem_descriptor();
template<typename T>
inline const std::string& CoordSystem_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CoordSystem>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CoordSystem_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CoordSystem_descriptor(), enum_t_value);
}
inline bool CoordSystem_Parse(
    const std::string& name, CoordSystem* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CoordSystem>(
    CoordSystem_descriptor(), name, value);
}
enum RotationSystem : int {
  WORLDR = 0,
  FORR = 1,
  CAMERAR = 2,
  RotationSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RotationSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RotationSystem_IsValid(int value);
constexpr RotationSystem RotationSystem_MIN = WORLDR;
constexpr RotationSystem RotationSystem_MAX = CAMERAR;
constexpr int RotationSystem_ARRAYSIZE = RotationSystem_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RotationSystem_descriptor();
template<typename T>
inline const std::string& RotationSystem_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RotationSystem>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RotationSystem_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RotationSystem_descriptor(), enum_t_value);
}
inline bool RotationSystem_Parse(
    const std::string& name, RotationSystem* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RotationSystem>(
    RotationSystem_descriptor(), name, value);
}
// ===================================================================

class Vector3 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector3* other);
  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.Vector3";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:BasilType.Vector3)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Quaternion* other);
  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // double w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:BasilType.Quaternion)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class Transform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Transform* other);
  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.Transform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double matrix = 1;
  int matrix_size() const;
  void clear_matrix();
  static const int kMatrixFieldNumber = 1;
  double matrix(int index) const;
  void set_matrix(int index, double value);
  void add_matrix(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix();

  // .BasilType.Vector3 origin = 2;
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 2;
  const ::BasilType::Vector3& origin() const;
  ::BasilType::Vector3* release_origin();
  ::BasilType::Vector3* mutable_origin();
  void set_allocated_origin(::BasilType::Vector3* origin);

  // @@protoc_insertion_point(class_scope:BasilType.Transform)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_;
  mutable std::atomic<int> _matrix_cached_byte_size_;
  ::BasilType::Vector3* origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class BasilException_HintsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BasilException_HintsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BasilException_HintsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  BasilException_HintsEntry_DoNotUse();
  BasilException_HintsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BasilException_HintsEntry_DoNotUse& other);
  static const BasilException_HintsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BasilException_HintsEntry_DoNotUse*>(&_BasilException_HintsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BasilType.BasilException.HintsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BasilType.BasilException.HintsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class BasilException :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.BasilException) */ {
 public:
  BasilException();
  virtual ~BasilException();

  BasilException(const BasilException& from);
  BasilException(BasilException&& from) noexcept
    : BasilException() {
    *this = ::std::move(from);
  }

  inline BasilException& operator=(const BasilException& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasilException& operator=(BasilException&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasilException& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasilException* internal_default_instance() {
    return reinterpret_cast<const BasilException*>(
               &_BasilException_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BasilException* other);
  friend void swap(BasilException& a, BasilException& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasilException* New() const final {
    return CreateMaybeMessage<BasilException>(nullptr);
  }

  BasilException* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasilException>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasilException& from);
  void MergeFrom(const BasilException& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasilException* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.BasilException";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> hints = 2;
  int hints_size() const;
  void clear_hints();
  static const int kHintsFieldNumber = 2;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      hints() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_hints();

  // string reason = 1;
  void clear_reason();
  static const int kReasonFieldNumber = 1;
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // @@protoc_insertion_point(class_scope:BasilType.BasilException)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BasilException_HintsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > hints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class CoordPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.CoordPosition) */ {
 public:
  CoordPosition();
  virtual ~CoordPosition();

  CoordPosition(const CoordPosition& from);
  CoordPosition(CoordPosition&& from) noexcept
    : CoordPosition() {
    *this = ::std::move(from);
  }

  inline CoordPosition& operator=(const CoordPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CoordPosition& operator=(CoordPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CoordPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CoordPosition* internal_default_instance() {
    return reinterpret_cast<const CoordPosition*>(
               &_CoordPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CoordPosition* other);
  friend void swap(CoordPosition& a, CoordPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoordPosition* New() const final {
    return CreateMaybeMessage<CoordPosition>(nullptr);
  }

  CoordPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CoordPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CoordPosition& from);
  void MergeFrom(const CoordPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CoordPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.CoordPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.Vector3 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::BasilType::Vector3& pos() const;
  ::BasilType::Vector3* release_pos();
  ::BasilType::Vector3* mutable_pos();
  void set_allocated_pos(::BasilType::Vector3* pos);

  // .BasilType.Quaternion rot = 2;
  bool has_rot() const;
  void clear_rot();
  static const int kRotFieldNumber = 2;
  const ::BasilType::Quaternion& rot() const;
  ::BasilType::Quaternion* release_rot();
  ::BasilType::Quaternion* mutable_rot();
  void set_allocated_rot(::BasilType::Quaternion* rot);

  // .BasilType.CoordSystem posRef = 3;
  void clear_posref();
  static const int kPosRefFieldNumber = 3;
  ::BasilType::CoordSystem posref() const;
  void set_posref(::BasilType::CoordSystem value);

  // .BasilType.RotationSystem rotRef = 4;
  void clear_rotref();
  static const int kRotRefFieldNumber = 4;
  ::BasilType::RotationSystem rotref() const;
  void set_rotref(::BasilType::RotationSystem value);

  // @@protoc_insertion_point(class_scope:BasilType.CoordPosition)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::Vector3* pos_;
  ::BasilType::Quaternion* rot_;
  int posref_;
  int rotref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class ObjectIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.ObjectIdentifier) */ {
 public:
  ObjectIdentifier();
  virtual ~ObjectIdentifier();

  ObjectIdentifier(const ObjectIdentifier& from);
  ObjectIdentifier(ObjectIdentifier&& from) noexcept
    : ObjectIdentifier() {
    *this = ::std::move(from);
  }

  inline ObjectIdentifier& operator=(const ObjectIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectIdentifier& operator=(ObjectIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectIdentifier* internal_default_instance() {
    return reinterpret_cast<const ObjectIdentifier*>(
               &_ObjectIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ObjectIdentifier* other);
  friend void swap(ObjectIdentifier& a, ObjectIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectIdentifier* New() const final {
    return CreateMaybeMessage<ObjectIdentifier>(nullptr);
  }

  ObjectIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectIdentifier& from);
  void MergeFrom(const ObjectIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.ObjectIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:BasilType.ObjectIdentifier)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class InstanceIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.InstanceIdentifier) */ {
 public:
  InstanceIdentifier();
  virtual ~InstanceIdentifier();

  InstanceIdentifier(const InstanceIdentifier& from);
  InstanceIdentifier(InstanceIdentifier&& from) noexcept
    : InstanceIdentifier() {
    *this = ::std::move(from);
  }

  inline InstanceIdentifier& operator=(const InstanceIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstanceIdentifier& operator=(InstanceIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstanceIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstanceIdentifier* internal_default_instance() {
    return reinterpret_cast<const InstanceIdentifier*>(
               &_InstanceIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(InstanceIdentifier* other);
  friend void swap(InstanceIdentifier& a, InstanceIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstanceIdentifier* New() const final {
    return CreateMaybeMessage<InstanceIdentifier>(nullptr);
  }

  InstanceIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstanceIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstanceIdentifier& from);
  void MergeFrom(const InstanceIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstanceIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.InstanceIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // @@protoc_insertion_point(class_scope:BasilType.InstanceIdentifier)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class AaBoundingBox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.AaBoundingBox) */ {
 public:
  AaBoundingBox();
  virtual ~AaBoundingBox();

  AaBoundingBox(const AaBoundingBox& from);
  AaBoundingBox(AaBoundingBox&& from) noexcept
    : AaBoundingBox() {
    *this = ::std::move(from);
  }

  inline AaBoundingBox& operator=(const AaBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline AaBoundingBox& operator=(AaBoundingBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AaBoundingBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AaBoundingBox* internal_default_instance() {
    return reinterpret_cast<const AaBoundingBox*>(
               &_AaBoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AaBoundingBox* other);
  friend void swap(AaBoundingBox& a, AaBoundingBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AaBoundingBox* New() const final {
    return CreateMaybeMessage<AaBoundingBox>(nullptr);
  }

  AaBoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AaBoundingBox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AaBoundingBox& from);
  void MergeFrom(const AaBoundingBox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AaBoundingBox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.AaBoundingBox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.Vector3 upperFrontLeft = 1;
  bool has_upperfrontleft() const;
  void clear_upperfrontleft();
  static const int kUpperFrontLeftFieldNumber = 1;
  const ::BasilType::Vector3& upperfrontleft() const;
  ::BasilType::Vector3* release_upperfrontleft();
  ::BasilType::Vector3* mutable_upperfrontleft();
  void set_allocated_upperfrontleft(::BasilType::Vector3* upperfrontleft);

  // .BasilType.Vector3 lowerBackRight = 2;
  bool has_lowerbackright() const;
  void clear_lowerbackright();
  static const int kLowerBackRightFieldNumber = 2;
  const ::BasilType::Vector3& lowerbackright() const;
  ::BasilType::Vector3* release_lowerbackright();
  ::BasilType::Vector3* mutable_lowerbackright();
  void set_allocated_lowerbackright(::BasilType::Vector3* lowerbackright);

  // @@protoc_insertion_point(class_scope:BasilType.AaBoundingBox)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::Vector3* upperfrontleft_;
  ::BasilType::Vector3* lowerbackright_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class DisplayableInfo_AssetEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DisplayableInfo_AssetEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DisplayableInfo_AssetEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  DisplayableInfo_AssetEntry_DoNotUse();
  DisplayableInfo_AssetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DisplayableInfo_AssetEntry_DoNotUse& other);
  static const DisplayableInfo_AssetEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DisplayableInfo_AssetEntry_DoNotUse*>(&_DisplayableInfo_AssetEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BasilType.DisplayableInfo.AssetEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BasilType.DisplayableInfo.AssetEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class DisplayableInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.DisplayableInfo) */ {
 public:
  DisplayableInfo();
  virtual ~DisplayableInfo();

  DisplayableInfo(const DisplayableInfo& from);
  DisplayableInfo(DisplayableInfo&& from) noexcept
    : DisplayableInfo() {
    *this = ::std::move(from);
  }

  inline DisplayableInfo& operator=(const DisplayableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplayableInfo& operator=(DisplayableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisplayableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisplayableInfo* internal_default_instance() {
    return reinterpret_cast<const DisplayableInfo*>(
               &_DisplayableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(DisplayableInfo* other);
  friend void swap(DisplayableInfo& a, DisplayableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisplayableInfo* New() const final {
    return CreateMaybeMessage<DisplayableInfo>(nullptr);
  }

  DisplayableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplayableInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisplayableInfo& from);
  void MergeFrom(const DisplayableInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplayableInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.DisplayableInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> asset = 3;
  int asset_size() const;
  void clear_asset();
  static const int kAssetFieldNumber = 3;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      asset() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_asset();

  // string displayableType = 2;
  void clear_displayabletype();
  static const int kDisplayableTypeFieldNumber = 2;
  const std::string& displayabletype() const;
  void set_displayabletype(const std::string& value);
  void set_displayabletype(std::string&& value);
  void set_displayabletype(const char* value);
  void set_displayabletype(const char* value, size_t size);
  std::string* mutable_displayabletype();
  std::string* release_displayabletype();
  void set_allocated_displayabletype(std::string* displayabletype);

  // .BasilType.AaBoundingBox aabb = 1;
  bool has_aabb() const;
  void clear_aabb();
  static const int kAabbFieldNumber = 1;
  const ::BasilType::AaBoundingBox& aabb() const;
  ::BasilType::AaBoundingBox* release_aabb();
  ::BasilType::AaBoundingBox* mutable_aabb();
  void set_allocated_aabb(::BasilType::AaBoundingBox* aabb);

  // @@protoc_insertion_point(class_scope:BasilType.DisplayableInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DisplayableInfo_AssetEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displayabletype_;
  ::BasilType::AaBoundingBox* aabb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class AssetInformation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.AssetInformation) */ {
 public:
  AssetInformation();
  virtual ~AssetInformation();

  AssetInformation(const AssetInformation& from);
  AssetInformation(AssetInformation&& from) noexcept
    : AssetInformation() {
    *this = ::std::move(from);
  }

  inline AssetInformation& operator=(const AssetInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssetInformation& operator=(AssetInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AssetInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AssetInformation* internal_default_instance() {
    return reinterpret_cast<const AssetInformation*>(
               &_AssetInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(AssetInformation* other);
  friend void swap(AssetInformation& a, AssetInformation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AssetInformation* New() const final {
    return CreateMaybeMessage<AssetInformation>(nullptr);
  }

  AssetInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AssetInformation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AssetInformation& from);
  void MergeFrom(const AssetInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AssetInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.AssetInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.ObjectIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::BasilType::ObjectIdentifier& id() const;
  ::BasilType::ObjectIdentifier* release_id();
  ::BasilType::ObjectIdentifier* mutable_id();
  void set_allocated_id(::BasilType::ObjectIdentifier* id);

  // .BasilType.DisplayableInfo displayInfo = 2;
  bool has_displayinfo() const;
  void clear_displayinfo();
  static const int kDisplayInfoFieldNumber = 2;
  const ::BasilType::DisplayableInfo& displayinfo() const;
  ::BasilType::DisplayableInfo* release_displayinfo();
  ::BasilType::DisplayableInfo* mutable_displayinfo();
  void set_allocated_displayinfo(::BasilType::DisplayableInfo* displayinfo);

  // @@protoc_insertion_point(class_scope:BasilType.AssetInformation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::ObjectIdentifier* id_;
  ::BasilType::DisplayableInfo* displayinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class PathDescription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.PathDescription) */ {
 public:
  PathDescription();
  virtual ~PathDescription();

  PathDescription(const PathDescription& from);
  PathDescription(PathDescription&& from) noexcept
    : PathDescription() {
    *this = ::std::move(from);
  }

  inline PathDescription& operator=(const PathDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathDescription& operator=(PathDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathDescription* internal_default_instance() {
    return reinterpret_cast<const PathDescription*>(
               &_PathDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PathDescription* other);
  friend void swap(PathDescription& a, PathDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PathDescription* New() const final {
    return CreateMaybeMessage<PathDescription>(nullptr);
  }

  PathDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathDescription& from);
  void MergeFrom(const PathDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.PathDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string pathType = 1;
  void clear_pathtype();
  static const int kPathTypeFieldNumber = 1;
  const std::string& pathtype() const;
  void set_pathtype(const std::string& value);
  void set_pathtype(std::string&& value);
  void set_pathtype(const char* value);
  void set_pathtype(const char* value, size_t size);
  std::string* mutable_pathtype();
  std::string* release_pathtype();
  void set_allocated_pathtype(std::string* pathtype);

  // @@protoc_insertion_point(class_scope:BasilType.PathDescription)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class InstancePositionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.InstancePositionInfo) */ {
 public:
  InstancePositionInfo();
  virtual ~InstancePositionInfo();

  InstancePositionInfo(const InstancePositionInfo& from);
  InstancePositionInfo(InstancePositionInfo&& from) noexcept
    : InstancePositionInfo() {
    *this = ::std::move(from);
  }

  inline InstancePositionInfo& operator=(const InstancePositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstancePositionInfo& operator=(InstancePositionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InstancePositionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InstancePositionInfo* internal_default_instance() {
    return reinterpret_cast<const InstancePositionInfo*>(
               &_InstancePositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(InstancePositionInfo* other);
  friend void swap(InstancePositionInfo& a, InstancePositionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InstancePositionInfo* New() const final {
    return CreateMaybeMessage<InstancePositionInfo>(nullptr);
  }

  InstancePositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InstancePositionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InstancePositionInfo& from);
  void MergeFrom(const InstancePositionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InstancePositionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.InstancePositionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.InstanceIdentifier id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::BasilType::InstanceIdentifier& id() const;
  ::BasilType::InstanceIdentifier* release_id();
  ::BasilType::InstanceIdentifier* mutable_id();
  void set_allocated_id(::BasilType::InstanceIdentifier* id);

  // .BasilType.CoordPosition pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::BasilType::CoordPosition& pos() const;
  ::BasilType::CoordPosition* release_pos();
  ::BasilType::CoordPosition* mutable_pos();
  void set_allocated_pos(::BasilType::CoordPosition* pos);

  // .BasilType.Vector3 vel = 3;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 3;
  const ::BasilType::Vector3& vel() const;
  ::BasilType::Vector3* release_vel();
  ::BasilType::Vector3* mutable_vel();
  void set_allocated_vel(::BasilType::Vector3* vel);

  // .BasilType.PathDescription path = 4;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 4;
  const ::BasilType::PathDescription& path() const;
  ::BasilType::PathDescription* release_path();
  ::BasilType::PathDescription* mutable_path();
  void set_allocated_path(::BasilType::PathDescription* path);

  // @@protoc_insertion_point(class_scope:BasilType.InstancePositionInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::InstanceIdentifier* id_;
  ::BasilType::CoordPosition* pos_;
  ::BasilType::Vector3* vel_;
  ::BasilType::PathDescription* path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class AccessAuthorization_AccessPropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccessAuthorization_AccessPropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AccessAuthorization_AccessPropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AccessAuthorization_AccessPropertiesEntry_DoNotUse();
  AccessAuthorization_AccessPropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AccessAuthorization_AccessPropertiesEntry_DoNotUse& other);
  static const AccessAuthorization_AccessPropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AccessAuthorization_AccessPropertiesEntry_DoNotUse*>(&_AccessAuthorization_AccessPropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BasilType.AccessAuthorization.AccessPropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BasilType.AccessAuthorization.AccessPropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class AccessAuthorization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.AccessAuthorization) */ {
 public:
  AccessAuthorization();
  virtual ~AccessAuthorization();

  AccessAuthorization(const AccessAuthorization& from);
  AccessAuthorization(AccessAuthorization&& from) noexcept
    : AccessAuthorization() {
    *this = ::std::move(from);
  }

  inline AccessAuthorization& operator=(const AccessAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessAuthorization& operator=(AccessAuthorization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccessAuthorization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccessAuthorization* internal_default_instance() {
    return reinterpret_cast<const AccessAuthorization*>(
               &_AccessAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AccessAuthorization* other);
  friend void swap(AccessAuthorization& a, AccessAuthorization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccessAuthorization* New() const final {
    return CreateMaybeMessage<AccessAuthorization>(nullptr);
  }

  AccessAuthorization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessAuthorization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccessAuthorization& from);
  void MergeFrom(const AccessAuthorization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessAuthorization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.AccessAuthorization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> accessProperties = 1;
  int accessproperties_size() const;
  void clear_accessproperties();
  static const int kAccessPropertiesFieldNumber = 1;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      accessproperties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_accessproperties();

  // @@protoc_insertion_point(class_scope:BasilType.AccessAuthorization)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AccessAuthorization_AccessPropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > accessproperties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class TraceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.TraceInfo) */ {
 public:
  TraceInfo();
  virtual ~TraceInfo();

  TraceInfo(const TraceInfo& from);
  TraceInfo(TraceInfo&& from) noexcept
    : TraceInfo() {
    *this = ::std::move(from);
  }

  inline TraceInfo& operator=(const TraceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceInfo& operator=(TraceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceInfo* internal_default_instance() {
    return reinterpret_cast<const TraceInfo*>(
               &_TraceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(TraceInfo* other);
  friend void swap(TraceInfo& a, TraceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TraceInfo* New() const final {
    return CreateMaybeMessage<TraceInfo>(nullptr);
  }

  TraceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceInfo& from);
  void MergeFrom(const TraceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.TraceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string info = 1;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const char* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // @@protoc_insertion_point(class_scope:BasilType.TraceInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// -------------------------------------------------------------------

class BResponseRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasilType.BResponseRequest) */ {
 public:
  BResponseRequest();
  virtual ~BResponseRequest();

  BResponseRequest(const BResponseRequest& from);
  BResponseRequest(BResponseRequest&& from) noexcept
    : BResponseRequest() {
    *this = ::std::move(from);
  }

  inline BResponseRequest& operator=(const BResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BResponseRequest& operator=(BResponseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BResponseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BResponseRequest* internal_default_instance() {
    return reinterpret_cast<const BResponseRequest*>(
               &_BResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(BResponseRequest* other);
  friend void swap(BResponseRequest& a, BResponseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BResponseRequest* New() const final {
    return CreateMaybeMessage<BResponseRequest>(nullptr);
  }

  BResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BResponseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BResponseRequest& from);
  void MergeFrom(const BResponseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BResponseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasilType.BResponseRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_BasilTypes_2eproto);
    return ::descriptor_table_BasilTypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string responseSessionKey = 2;
  void clear_responsesessionkey();
  static const int kResponseSessionKeyFieldNumber = 2;
  const std::string& responsesessionkey() const;
  void set_responsesessionkey(const std::string& value);
  void set_responsesessionkey(std::string&& value);
  void set_responsesessionkey(const char* value);
  void set_responsesessionkey(const char* value, size_t size);
  std::string* mutable_responsesessionkey();
  std::string* release_responsesessionkey();
  void set_allocated_responsesessionkey(std::string* responsesessionkey);

  // uint32 responseSession = 1;
  void clear_responsesession();
  static const int kResponseSessionFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 responsesession() const;
  void set_responsesession(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:BasilType.BResponseRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsesessionkey_;
  ::PROTOBUF_NAMESPACE_ID::uint32 responsesession_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BasilTypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:BasilType.Vector3.x)
  return x_;
}
inline void Vector3::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:BasilType.Vector3.y)
  return y_;
}
inline void Vector3::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:BasilType.Vector3.z)
  return z_;
}
inline void Vector3::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Vector3.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:BasilType.Quaternion.x)
  return x_;
}
inline void Quaternion::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:BasilType.Quaternion.y)
  return y_;
}
inline void Quaternion::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:BasilType.Quaternion.z)
  return z_;
}
inline void Quaternion::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:BasilType.Quaternion.w)
  return w_;
}
inline void Quaternion::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:BasilType.Quaternion.w)
}

// -------------------------------------------------------------------

// Transform

// repeated double matrix = 1;
inline int Transform::matrix_size() const {
  return matrix_.size();
}
inline void Transform::clear_matrix() {
  matrix_.Clear();
}
inline double Transform::matrix(int index) const {
  // @@protoc_insertion_point(field_get:BasilType.Transform.matrix)
  return matrix_.Get(index);
}
inline void Transform::set_matrix(int index, double value) {
  matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:BasilType.Transform.matrix)
}
inline void Transform::add_matrix(double value) {
  matrix_.Add(value);
  // @@protoc_insertion_point(field_add:BasilType.Transform.matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Transform::matrix() const {
  // @@protoc_insertion_point(field_list:BasilType.Transform.matrix)
  return matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Transform::mutable_matrix() {
  // @@protoc_insertion_point(field_mutable_list:BasilType.Transform.matrix)
  return &matrix_;
}

// .BasilType.Vector3 origin = 2;
inline bool Transform::has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline void Transform::clear_origin() {
  if (GetArenaNoVirtual() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
inline const ::BasilType::Vector3& Transform::origin() const {
  const ::BasilType::Vector3* p = origin_;
  // @@protoc_insertion_point(field_get:BasilType.Transform.origin)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::Vector3*>(
      &::BasilType::_Vector3_default_instance_);
}
inline ::BasilType::Vector3* Transform::release_origin() {
  // @@protoc_insertion_point(field_release:BasilType.Transform.origin)
  
  ::BasilType::Vector3* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::BasilType::Vector3* Transform::mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::Vector3>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.Transform.origin)
  return origin_;
}
inline void Transform::set_allocated_origin(::BasilType::Vector3* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:BasilType.Transform.origin)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BasilException

// string reason = 1;
inline void BasilException::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BasilException::reason() const {
  // @@protoc_insertion_point(field_get:BasilType.BasilException.reason)
  return reason_.GetNoArena();
}
inline void BasilException::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.BasilException.reason)
}
inline void BasilException::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.BasilException.reason)
}
inline void BasilException::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.BasilException.reason)
}
inline void BasilException::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.BasilException.reason)
}
inline std::string* BasilException::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.BasilException.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasilException::release_reason() {
  // @@protoc_insertion_point(field_release:BasilType.BasilException.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasilException::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:BasilType.BasilException.reason)
}

// map<string, string> hints = 2;
inline int BasilException::hints_size() const {
  return hints_.size();
}
inline void BasilException::clear_hints() {
  hints_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BasilException::hints() const {
  // @@protoc_insertion_point(field_map:BasilType.BasilException.hints)
  return hints_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BasilException::mutable_hints() {
  // @@protoc_insertion_point(field_mutable_map:BasilType.BasilException.hints)
  return hints_.MutableMap();
}

// -------------------------------------------------------------------

// CoordPosition

// .BasilType.Vector3 pos = 1;
inline bool CoordPosition::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline void CoordPosition::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::BasilType::Vector3& CoordPosition::pos() const {
  const ::BasilType::Vector3* p = pos_;
  // @@protoc_insertion_point(field_get:BasilType.CoordPosition.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::Vector3*>(
      &::BasilType::_Vector3_default_instance_);
}
inline ::BasilType::Vector3* CoordPosition::release_pos() {
  // @@protoc_insertion_point(field_release:BasilType.CoordPosition.pos)
  
  ::BasilType::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::BasilType::Vector3* CoordPosition::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::Vector3>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.CoordPosition.pos)
  return pos_;
}
inline void CoordPosition::set_allocated_pos(::BasilType::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:BasilType.CoordPosition.pos)
}

// .BasilType.Quaternion rot = 2;
inline bool CoordPosition::has_rot() const {
  return this != internal_default_instance() && rot_ != nullptr;
}
inline void CoordPosition::clear_rot() {
  if (GetArenaNoVirtual() == nullptr && rot_ != nullptr) {
    delete rot_;
  }
  rot_ = nullptr;
}
inline const ::BasilType::Quaternion& CoordPosition::rot() const {
  const ::BasilType::Quaternion* p = rot_;
  // @@protoc_insertion_point(field_get:BasilType.CoordPosition.rot)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::Quaternion*>(
      &::BasilType::_Quaternion_default_instance_);
}
inline ::BasilType::Quaternion* CoordPosition::release_rot() {
  // @@protoc_insertion_point(field_release:BasilType.CoordPosition.rot)
  
  ::BasilType::Quaternion* temp = rot_;
  rot_ = nullptr;
  return temp;
}
inline ::BasilType::Quaternion* CoordPosition::mutable_rot() {
  
  if (rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::Quaternion>(GetArenaNoVirtual());
    rot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.CoordPosition.rot)
  return rot_;
}
inline void CoordPosition::set_allocated_rot(::BasilType::Quaternion* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    
  } else {
    
  }
  rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:BasilType.CoordPosition.rot)
}

// .BasilType.CoordSystem posRef = 3;
inline void CoordPosition::clear_posref() {
  posref_ = 0;
}
inline ::BasilType::CoordSystem CoordPosition::posref() const {
  // @@protoc_insertion_point(field_get:BasilType.CoordPosition.posRef)
  return static_cast< ::BasilType::CoordSystem >(posref_);
}
inline void CoordPosition::set_posref(::BasilType::CoordSystem value) {
  
  posref_ = value;
  // @@protoc_insertion_point(field_set:BasilType.CoordPosition.posRef)
}

// .BasilType.RotationSystem rotRef = 4;
inline void CoordPosition::clear_rotref() {
  rotref_ = 0;
}
inline ::BasilType::RotationSystem CoordPosition::rotref() const {
  // @@protoc_insertion_point(field_get:BasilType.CoordPosition.rotRef)
  return static_cast< ::BasilType::RotationSystem >(rotref_);
}
inline void CoordPosition::set_rotref(::BasilType::RotationSystem value) {
  
  rotref_ = value;
  // @@protoc_insertion_point(field_set:BasilType.CoordPosition.rotRef)
}

// -------------------------------------------------------------------

// ObjectIdentifier

// string id = 1;
inline void ObjectIdentifier::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ObjectIdentifier::id() const {
  // @@protoc_insertion_point(field_get:BasilType.ObjectIdentifier.id)
  return id_.GetNoArena();
}
inline void ObjectIdentifier::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.ObjectIdentifier.id)
}
inline void ObjectIdentifier::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.ObjectIdentifier.id)
}
inline void ObjectIdentifier::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.ObjectIdentifier.id)
}
inline void ObjectIdentifier::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.ObjectIdentifier.id)
}
inline std::string* ObjectIdentifier::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.ObjectIdentifier.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ObjectIdentifier::release_id() {
  // @@protoc_insertion_point(field_release:BasilType.ObjectIdentifier.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectIdentifier::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BasilType.ObjectIdentifier.id)
}

// -------------------------------------------------------------------

// InstanceIdentifier

// string id = 1;
inline void InstanceIdentifier::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InstanceIdentifier::id() const {
  // @@protoc_insertion_point(field_get:BasilType.InstanceIdentifier.id)
  return id_.GetNoArena();
}
inline void InstanceIdentifier::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.InstanceIdentifier.id)
}
inline void InstanceIdentifier::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.InstanceIdentifier.id)
}
inline void InstanceIdentifier::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.InstanceIdentifier.id)
}
inline void InstanceIdentifier::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.InstanceIdentifier.id)
}
inline std::string* InstanceIdentifier::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.InstanceIdentifier.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InstanceIdentifier::release_id() {
  // @@protoc_insertion_point(field_release:BasilType.InstanceIdentifier.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InstanceIdentifier::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:BasilType.InstanceIdentifier.id)
}

// -------------------------------------------------------------------

// AaBoundingBox

// .BasilType.Vector3 upperFrontLeft = 1;
inline bool AaBoundingBox::has_upperfrontleft() const {
  return this != internal_default_instance() && upperfrontleft_ != nullptr;
}
inline void AaBoundingBox::clear_upperfrontleft() {
  if (GetArenaNoVirtual() == nullptr && upperfrontleft_ != nullptr) {
    delete upperfrontleft_;
  }
  upperfrontleft_ = nullptr;
}
inline const ::BasilType::Vector3& AaBoundingBox::upperfrontleft() const {
  const ::BasilType::Vector3* p = upperfrontleft_;
  // @@protoc_insertion_point(field_get:BasilType.AaBoundingBox.upperFrontLeft)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::Vector3*>(
      &::BasilType::_Vector3_default_instance_);
}
inline ::BasilType::Vector3* AaBoundingBox::release_upperfrontleft() {
  // @@protoc_insertion_point(field_release:BasilType.AaBoundingBox.upperFrontLeft)
  
  ::BasilType::Vector3* temp = upperfrontleft_;
  upperfrontleft_ = nullptr;
  return temp;
}
inline ::BasilType::Vector3* AaBoundingBox::mutable_upperfrontleft() {
  
  if (upperfrontleft_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::Vector3>(GetArenaNoVirtual());
    upperfrontleft_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.AaBoundingBox.upperFrontLeft)
  return upperfrontleft_;
}
inline void AaBoundingBox::set_allocated_upperfrontleft(::BasilType::Vector3* upperfrontleft) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upperfrontleft_;
  }
  if (upperfrontleft) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upperfrontleft = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upperfrontleft, submessage_arena);
    }
    
  } else {
    
  }
  upperfrontleft_ = upperfrontleft;
  // @@protoc_insertion_point(field_set_allocated:BasilType.AaBoundingBox.upperFrontLeft)
}

// .BasilType.Vector3 lowerBackRight = 2;
inline bool AaBoundingBox::has_lowerbackright() const {
  return this != internal_default_instance() && lowerbackright_ != nullptr;
}
inline void AaBoundingBox::clear_lowerbackright() {
  if (GetArenaNoVirtual() == nullptr && lowerbackright_ != nullptr) {
    delete lowerbackright_;
  }
  lowerbackright_ = nullptr;
}
inline const ::BasilType::Vector3& AaBoundingBox::lowerbackright() const {
  const ::BasilType::Vector3* p = lowerbackright_;
  // @@protoc_insertion_point(field_get:BasilType.AaBoundingBox.lowerBackRight)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::Vector3*>(
      &::BasilType::_Vector3_default_instance_);
}
inline ::BasilType::Vector3* AaBoundingBox::release_lowerbackright() {
  // @@protoc_insertion_point(field_release:BasilType.AaBoundingBox.lowerBackRight)
  
  ::BasilType::Vector3* temp = lowerbackright_;
  lowerbackright_ = nullptr;
  return temp;
}
inline ::BasilType::Vector3* AaBoundingBox::mutable_lowerbackright() {
  
  if (lowerbackright_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::Vector3>(GetArenaNoVirtual());
    lowerbackright_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.AaBoundingBox.lowerBackRight)
  return lowerbackright_;
}
inline void AaBoundingBox::set_allocated_lowerbackright(::BasilType::Vector3* lowerbackright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lowerbackright_;
  }
  if (lowerbackright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lowerbackright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lowerbackright, submessage_arena);
    }
    
  } else {
    
  }
  lowerbackright_ = lowerbackright;
  // @@protoc_insertion_point(field_set_allocated:BasilType.AaBoundingBox.lowerBackRight)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DisplayableInfo

// .BasilType.AaBoundingBox aabb = 1;
inline bool DisplayableInfo::has_aabb() const {
  return this != internal_default_instance() && aabb_ != nullptr;
}
inline void DisplayableInfo::clear_aabb() {
  if (GetArenaNoVirtual() == nullptr && aabb_ != nullptr) {
    delete aabb_;
  }
  aabb_ = nullptr;
}
inline const ::BasilType::AaBoundingBox& DisplayableInfo::aabb() const {
  const ::BasilType::AaBoundingBox* p = aabb_;
  // @@protoc_insertion_point(field_get:BasilType.DisplayableInfo.aabb)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AaBoundingBox*>(
      &::BasilType::_AaBoundingBox_default_instance_);
}
inline ::BasilType::AaBoundingBox* DisplayableInfo::release_aabb() {
  // @@protoc_insertion_point(field_release:BasilType.DisplayableInfo.aabb)
  
  ::BasilType::AaBoundingBox* temp = aabb_;
  aabb_ = nullptr;
  return temp;
}
inline ::BasilType::AaBoundingBox* DisplayableInfo::mutable_aabb() {
  
  if (aabb_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AaBoundingBox>(GetArenaNoVirtual());
    aabb_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.DisplayableInfo.aabb)
  return aabb_;
}
inline void DisplayableInfo::set_allocated_aabb(::BasilType::AaBoundingBox* aabb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete aabb_;
  }
  if (aabb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aabb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aabb, submessage_arena);
    }
    
  } else {
    
  }
  aabb_ = aabb;
  // @@protoc_insertion_point(field_set_allocated:BasilType.DisplayableInfo.aabb)
}

// string displayableType = 2;
inline void DisplayableInfo::clear_displayabletype() {
  displayabletype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DisplayableInfo::displayabletype() const {
  // @@protoc_insertion_point(field_get:BasilType.DisplayableInfo.displayableType)
  return displayabletype_.GetNoArena();
}
inline void DisplayableInfo::set_displayabletype(const std::string& value) {
  
  displayabletype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.DisplayableInfo.displayableType)
}
inline void DisplayableInfo::set_displayabletype(std::string&& value) {
  
  displayabletype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.DisplayableInfo.displayableType)
}
inline void DisplayableInfo::set_displayabletype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  displayabletype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.DisplayableInfo.displayableType)
}
inline void DisplayableInfo::set_displayabletype(const char* value, size_t size) {
  
  displayabletype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.DisplayableInfo.displayableType)
}
inline std::string* DisplayableInfo::mutable_displayabletype() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.DisplayableInfo.displayableType)
  return displayabletype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisplayableInfo::release_displayabletype() {
  // @@protoc_insertion_point(field_release:BasilType.DisplayableInfo.displayableType)
  
  return displayabletype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisplayableInfo::set_allocated_displayabletype(std::string* displayabletype) {
  if (displayabletype != nullptr) {
    
  } else {
    
  }
  displayabletype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displayabletype);
  // @@protoc_insertion_point(field_set_allocated:BasilType.DisplayableInfo.displayableType)
}

// map<string, string> asset = 3;
inline int DisplayableInfo::asset_size() const {
  return asset_.size();
}
inline void DisplayableInfo::clear_asset() {
  asset_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
DisplayableInfo::asset() const {
  // @@protoc_insertion_point(field_map:BasilType.DisplayableInfo.asset)
  return asset_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
DisplayableInfo::mutable_asset() {
  // @@protoc_insertion_point(field_mutable_map:BasilType.DisplayableInfo.asset)
  return asset_.MutableMap();
}

// -------------------------------------------------------------------

// AssetInformation

// .BasilType.ObjectIdentifier id = 1;
inline bool AssetInformation::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void AssetInformation::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::BasilType::ObjectIdentifier& AssetInformation::id() const {
  const ::BasilType::ObjectIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:BasilType.AssetInformation.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::ObjectIdentifier*>(
      &::BasilType::_ObjectIdentifier_default_instance_);
}
inline ::BasilType::ObjectIdentifier* AssetInformation::release_id() {
  // @@protoc_insertion_point(field_release:BasilType.AssetInformation.id)
  
  ::BasilType::ObjectIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::BasilType::ObjectIdentifier* AssetInformation::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::ObjectIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.AssetInformation.id)
  return id_;
}
inline void AssetInformation::set_allocated_id(::BasilType::ObjectIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:BasilType.AssetInformation.id)
}

// .BasilType.DisplayableInfo displayInfo = 2;
inline bool AssetInformation::has_displayinfo() const {
  return this != internal_default_instance() && displayinfo_ != nullptr;
}
inline void AssetInformation::clear_displayinfo() {
  if (GetArenaNoVirtual() == nullptr && displayinfo_ != nullptr) {
    delete displayinfo_;
  }
  displayinfo_ = nullptr;
}
inline const ::BasilType::DisplayableInfo& AssetInformation::displayinfo() const {
  const ::BasilType::DisplayableInfo* p = displayinfo_;
  // @@protoc_insertion_point(field_get:BasilType.AssetInformation.displayInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::DisplayableInfo*>(
      &::BasilType::_DisplayableInfo_default_instance_);
}
inline ::BasilType::DisplayableInfo* AssetInformation::release_displayinfo() {
  // @@protoc_insertion_point(field_release:BasilType.AssetInformation.displayInfo)
  
  ::BasilType::DisplayableInfo* temp = displayinfo_;
  displayinfo_ = nullptr;
  return temp;
}
inline ::BasilType::DisplayableInfo* AssetInformation::mutable_displayinfo() {
  
  if (displayinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::DisplayableInfo>(GetArenaNoVirtual());
    displayinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.AssetInformation.displayInfo)
  return displayinfo_;
}
inline void AssetInformation::set_allocated_displayinfo(::BasilType::DisplayableInfo* displayinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete displayinfo_;
  }
  if (displayinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      displayinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, displayinfo, submessage_arena);
    }
    
  } else {
    
  }
  displayinfo_ = displayinfo;
  // @@protoc_insertion_point(field_set_allocated:BasilType.AssetInformation.displayInfo)
}

// -------------------------------------------------------------------

// PathDescription

// string pathType = 1;
inline void PathDescription::clear_pathtype() {
  pathtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PathDescription::pathtype() const {
  // @@protoc_insertion_point(field_get:BasilType.PathDescription.pathType)
  return pathtype_.GetNoArena();
}
inline void PathDescription::set_pathtype(const std::string& value) {
  
  pathtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.PathDescription.pathType)
}
inline void PathDescription::set_pathtype(std::string&& value) {
  
  pathtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.PathDescription.pathType)
}
inline void PathDescription::set_pathtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pathtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.PathDescription.pathType)
}
inline void PathDescription::set_pathtype(const char* value, size_t size) {
  
  pathtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.PathDescription.pathType)
}
inline std::string* PathDescription::mutable_pathtype() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.PathDescription.pathType)
  return pathtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PathDescription::release_pathtype() {
  // @@protoc_insertion_point(field_release:BasilType.PathDescription.pathType)
  
  return pathtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PathDescription::set_allocated_pathtype(std::string* pathtype) {
  if (pathtype != nullptr) {
    
  } else {
    
  }
  pathtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pathtype);
  // @@protoc_insertion_point(field_set_allocated:BasilType.PathDescription.pathType)
}

// -------------------------------------------------------------------

// InstancePositionInfo

// .BasilType.InstanceIdentifier id = 1;
inline bool InstancePositionInfo::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline void InstancePositionInfo::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
inline const ::BasilType::InstanceIdentifier& InstancePositionInfo::id() const {
  const ::BasilType::InstanceIdentifier* p = id_;
  // @@protoc_insertion_point(field_get:BasilType.InstancePositionInfo.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::InstanceIdentifier*>(
      &::BasilType::_InstanceIdentifier_default_instance_);
}
inline ::BasilType::InstanceIdentifier* InstancePositionInfo::release_id() {
  // @@protoc_insertion_point(field_release:BasilType.InstancePositionInfo.id)
  
  ::BasilType::InstanceIdentifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::BasilType::InstanceIdentifier* InstancePositionInfo::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::InstanceIdentifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.InstancePositionInfo.id)
  return id_;
}
inline void InstancePositionInfo::set_allocated_id(::BasilType::InstanceIdentifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:BasilType.InstancePositionInfo.id)
}

// .BasilType.CoordPosition pos = 2;
inline bool InstancePositionInfo::has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline void InstancePositionInfo::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::BasilType::CoordPosition& InstancePositionInfo::pos() const {
  const ::BasilType::CoordPosition* p = pos_;
  // @@protoc_insertion_point(field_get:BasilType.InstancePositionInfo.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::CoordPosition*>(
      &::BasilType::_CoordPosition_default_instance_);
}
inline ::BasilType::CoordPosition* InstancePositionInfo::release_pos() {
  // @@protoc_insertion_point(field_release:BasilType.InstancePositionInfo.pos)
  
  ::BasilType::CoordPosition* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::BasilType::CoordPosition* InstancePositionInfo::mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::CoordPosition>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.InstancePositionInfo.pos)
  return pos_;
}
inline void InstancePositionInfo::set_allocated_pos(::BasilType::CoordPosition* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:BasilType.InstancePositionInfo.pos)
}

// .BasilType.Vector3 vel = 3;
inline bool InstancePositionInfo::has_vel() const {
  return this != internal_default_instance() && vel_ != nullptr;
}
inline void InstancePositionInfo::clear_vel() {
  if (GetArenaNoVirtual() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
inline const ::BasilType::Vector3& InstancePositionInfo::vel() const {
  const ::BasilType::Vector3* p = vel_;
  // @@protoc_insertion_point(field_get:BasilType.InstancePositionInfo.vel)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::Vector3*>(
      &::BasilType::_Vector3_default_instance_);
}
inline ::BasilType::Vector3* InstancePositionInfo::release_vel() {
  // @@protoc_insertion_point(field_release:BasilType.InstancePositionInfo.vel)
  
  ::BasilType::Vector3* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::BasilType::Vector3* InstancePositionInfo::mutable_vel() {
  
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::Vector3>(GetArenaNoVirtual());
    vel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.InstancePositionInfo.vel)
  return vel_;
}
inline void InstancePositionInfo::set_allocated_vel(::BasilType::Vector3* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:BasilType.InstancePositionInfo.vel)
}

// .BasilType.PathDescription path = 4;
inline bool InstancePositionInfo::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline void InstancePositionInfo::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::BasilType::PathDescription& InstancePositionInfo::path() const {
  const ::BasilType::PathDescription* p = path_;
  // @@protoc_insertion_point(field_get:BasilType.InstancePositionInfo.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::PathDescription*>(
      &::BasilType::_PathDescription_default_instance_);
}
inline ::BasilType::PathDescription* InstancePositionInfo::release_path() {
  // @@protoc_insertion_point(field_release:BasilType.InstancePositionInfo.path)
  
  ::BasilType::PathDescription* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::BasilType::PathDescription* InstancePositionInfo::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::PathDescription>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BasilType.InstancePositionInfo.path)
  return path_;
}
inline void InstancePositionInfo::set_allocated_path(::BasilType::PathDescription* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:BasilType.InstancePositionInfo.path)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AccessAuthorization

// map<string, string> accessProperties = 1;
inline int AccessAuthorization::accessproperties_size() const {
  return accessproperties_.size();
}
inline void AccessAuthorization::clear_accessproperties() {
  accessproperties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AccessAuthorization::accessproperties() const {
  // @@protoc_insertion_point(field_map:BasilType.AccessAuthorization.accessProperties)
  return accessproperties_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AccessAuthorization::mutable_accessproperties() {
  // @@protoc_insertion_point(field_mutable_map:BasilType.AccessAuthorization.accessProperties)
  return accessproperties_.MutableMap();
}

// -------------------------------------------------------------------

// TraceInfo

// string info = 1;
inline void TraceInfo::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TraceInfo::info() const {
  // @@protoc_insertion_point(field_get:BasilType.TraceInfo.info)
  return info_.GetNoArena();
}
inline void TraceInfo::set_info(const std::string& value) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.TraceInfo.info)
}
inline void TraceInfo::set_info(std::string&& value) {
  
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.TraceInfo.info)
}
inline void TraceInfo::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.TraceInfo.info)
}
inline void TraceInfo::set_info(const char* value, size_t size) {
  
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.TraceInfo.info)
}
inline std::string* TraceInfo::mutable_info() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.TraceInfo.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TraceInfo::release_info() {
  // @@protoc_insertion_point(field_release:BasilType.TraceInfo.info)
  
  return info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TraceInfo::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    
  } else {
    
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:BasilType.TraceInfo.info)
}

// -------------------------------------------------------------------

// BResponseRequest

// uint32 responseSession = 1;
inline void BResponseRequest::clear_responsesession() {
  responsesession_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BResponseRequest::responsesession() const {
  // @@protoc_insertion_point(field_get:BasilType.BResponseRequest.responseSession)
  return responsesession_;
}
inline void BResponseRequest::set_responsesession(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  responsesession_ = value;
  // @@protoc_insertion_point(field_set:BasilType.BResponseRequest.responseSession)
}

// string responseSessionKey = 2;
inline void BResponseRequest::clear_responsesessionkey() {
  responsesessionkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BResponseRequest::responsesessionkey() const {
  // @@protoc_insertion_point(field_get:BasilType.BResponseRequest.responseSessionKey)
  return responsesessionkey_.GetNoArena();
}
inline void BResponseRequest::set_responsesessionkey(const std::string& value) {
  
  responsesessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BasilType.BResponseRequest.responseSessionKey)
}
inline void BResponseRequest::set_responsesessionkey(std::string&& value) {
  
  responsesessionkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BasilType.BResponseRequest.responseSessionKey)
}
inline void BResponseRequest::set_responsesessionkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  responsesessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BasilType.BResponseRequest.responseSessionKey)
}
inline void BResponseRequest::set_responsesessionkey(const char* value, size_t size) {
  
  responsesessionkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BasilType.BResponseRequest.responseSessionKey)
}
inline std::string* BResponseRequest::mutable_responsesessionkey() {
  
  // @@protoc_insertion_point(field_mutable:BasilType.BResponseRequest.responseSessionKey)
  return responsesessionkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BResponseRequest::release_responsesessionkey() {
  // @@protoc_insertion_point(field_release:BasilType.BResponseRequest.responseSessionKey)
  
  return responsesessionkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BResponseRequest::set_allocated_responsesessionkey(std::string* responsesessionkey) {
  if (responsesessionkey != nullptr) {
    
  } else {
    
  }
  responsesessionkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responsesessionkey);
  // @@protoc_insertion_point(field_set_allocated:BasilType.BResponseRequest.responseSessionKey)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BasilType

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BasilType::CoordSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BasilType::CoordSystem>() {
  return ::BasilType::CoordSystem_descriptor();
}
template <> struct is_proto_enum< ::BasilType::RotationSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BasilType::RotationSystem>() {
  return ::BasilType::RotationSystem_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_BasilTypes_2eproto
