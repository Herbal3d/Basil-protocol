// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BrothServer.proto

#include "BrothServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_BasilTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccessAuthorization_BasilTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BasilTypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BasilException_BasilTypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventResp_FilterEntry_DoNotUse_BrothServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventResp_PropertiesEntry_DoNotUse_BrothServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterTopicReq_PropertiesEntry_DoNotUse_BrothServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendEventReq_FeaturesEntry_DoNotUse_BrothServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeReq_PropertiesEntry_DoNotUse_BrothServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionClearResp_PropertiesEntry_DoNotUse_BrothServer_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionMadeResp_PropertiesEntry_DoNotUse_BrothServer_2eproto;
namespace BrothServer {
class RegisterTopicReq_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterTopicReq_PropertiesEntry_DoNotUse> _instance;
} _RegisterTopicReq_PropertiesEntry_DoNotUse_default_instance_;
class RegisterTopicReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterTopicReq> _instance;
} _RegisterTopicReq_default_instance_;
class RegisterTopicRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterTopicResp> _instance;
} _RegisterTopicResp_default_instance_;
class DeregisterTopicReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeregisterTopicReq> _instance;
} _DeregisterTopicReq_default_instance_;
class DeregisterTopicRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeregisterTopicResp> _instance;
} _DeregisterTopicResp_default_instance_;
class SubscribeReq_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeReq_PropertiesEntry_DoNotUse> _instance;
} _SubscribeReq_PropertiesEntry_DoNotUse_default_instance_;
class SubscribeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeReq> _instance;
} _SubscribeReq_default_instance_;
class SubscribeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResp> _instance;
} _SubscribeResp_default_instance_;
class UnsubscribeReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeReq> _instance;
} _UnsubscribeReq_default_instance_;
class UnsubscribeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeResp> _instance;
} _UnsubscribeResp_default_instance_;
class SubscriptionMadeResp_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionMadeResp_PropertiesEntry_DoNotUse> _instance;
} _SubscriptionMadeResp_PropertiesEntry_DoNotUse_default_instance_;
class SubscriptionMadeRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionMadeResp> _instance;
} _SubscriptionMadeResp_default_instance_;
class SubscriptionClearResp_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionClearResp_PropertiesEntry_DoNotUse> _instance;
} _SubscriptionClearResp_PropertiesEntry_DoNotUse_default_instance_;
class SubscriptionClearRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscriptionClearResp> _instance;
} _SubscriptionClearResp_default_instance_;
class SendEventReq_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendEventReq_FeaturesEntry_DoNotUse> _instance;
} _SendEventReq_FeaturesEntry_DoNotUse_default_instance_;
class SendEventReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendEventReq> _instance;
} _SendEventReq_default_instance_;
class SendEventRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendEventResp> _instance;
} _SendEventResp_default_instance_;
class EventResp_FilterEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventResp_FilterEntry_DoNotUse> _instance;
} _EventResp_FilterEntry_DoNotUse_default_instance_;
class EventResp_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventResp_PropertiesEntry_DoNotUse> _instance;
} _EventResp_PropertiesEntry_DoNotUse_default_instance_;
class EventRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventResp> _instance;
} _EventResp_default_instance_;
}  // namespace BrothServer
static void InitDefaultsscc_info_DeregisterTopicReq_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_DeregisterTopicReq_default_instance_;
    new (ptr) ::BrothServer::DeregisterTopicReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::DeregisterTopicReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeregisterTopicReq_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeregisterTopicReq_BrothServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_DeregisterTopicResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_DeregisterTopicResp_default_instance_;
    new (ptr) ::BrothServer::DeregisterTopicResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::DeregisterTopicResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeregisterTopicResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeregisterTopicResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_EventResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_EventResp_default_instance_;
    new (ptr) ::BrothServer::EventResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::EventResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_EventResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_EventResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,
      &scc_info_EventResp_FilterEntry_DoNotUse_BrothServer_2eproto.base,
      &scc_info_EventResp_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,}};

static void InitDefaultsscc_info_EventResp_FilterEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_EventResp_FilterEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::EventResp_FilterEntry_DoNotUse();
  }
  ::BrothServer::EventResp_FilterEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventResp_FilterEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventResp_FilterEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_EventResp_PropertiesEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_EventResp_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::EventResp_PropertiesEntry_DoNotUse();
  }
  ::BrothServer::EventResp_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventResp_PropertiesEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EventResp_PropertiesEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_RegisterTopicReq_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_RegisterTopicReq_default_instance_;
    new (ptr) ::BrothServer::RegisterTopicReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::RegisterTopicReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RegisterTopicReq_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RegisterTopicReq_BrothServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,
      &scc_info_RegisterTopicReq_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,}};

static void InitDefaultsscc_info_RegisterTopicReq_PropertiesEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_RegisterTopicReq_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse();
  }
  ::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterTopicReq_PropertiesEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RegisterTopicReq_PropertiesEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_RegisterTopicResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_RegisterTopicResp_default_instance_;
    new (ptr) ::BrothServer::RegisterTopicResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::RegisterTopicResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisterTopicResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RegisterTopicResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_SendEventReq_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SendEventReq_default_instance_;
    new (ptr) ::BrothServer::SendEventReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::SendEventReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendEventReq_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SendEventReq_BrothServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,
      &scc_info_SendEventReq_FeaturesEntry_DoNotUse_BrothServer_2eproto.base,}};

static void InitDefaultsscc_info_SendEventReq_FeaturesEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SendEventReq_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::SendEventReq_FeaturesEntry_DoNotUse();
  }
  ::BrothServer::SendEventReq_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendEventReq_FeaturesEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SendEventReq_FeaturesEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_SendEventResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SendEventResp_default_instance_;
    new (ptr) ::BrothServer::SendEventResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::SendEventResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendEventResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SendEventResp_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeReq_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscribeReq_default_instance_;
    new (ptr) ::BrothServer::SubscribeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::SubscribeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscribeReq_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SubscribeReq_BrothServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,
      &scc_info_SubscribeReq_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeReq_PropertiesEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscribeReq_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse();
  }
  ::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeReq_PropertiesEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscribeReq_PropertiesEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscribeResp_default_instance_;
    new (ptr) ::BrothServer::SubscribeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::SubscribeResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SubscribeResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionClearResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscriptionClearResp_default_instance_;
    new (ptr) ::BrothServer::SubscriptionClearResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::SubscriptionClearResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscriptionClearResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SubscriptionClearResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,
      &scc_info_SubscriptionClearResp_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionClearResp_PropertiesEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscriptionClearResp_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse();
  }
  ::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionClearResp_PropertiesEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscriptionClearResp_PropertiesEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_SubscriptionMadeResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscriptionMadeResp_default_instance_;
    new (ptr) ::BrothServer::SubscriptionMadeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::SubscriptionMadeResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SubscriptionMadeResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SubscriptionMadeResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,
      &scc_info_SubscriptionMadeResp_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,}};

static void InitDefaultsscc_info_SubscriptionMadeResp_PropertiesEntry_DoNotUse_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_SubscriptionMadeResp_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse();
  }
  ::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscriptionMadeResp_PropertiesEntry_DoNotUse_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubscriptionMadeResp_PropertiesEntry_DoNotUse_BrothServer_2eproto}, {}};

static void InitDefaultsscc_info_UnsubscribeReq_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_UnsubscribeReq_default_instance_;
    new (ptr) ::BrothServer::UnsubscribeReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::UnsubscribeReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeReq_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UnsubscribeReq_BrothServer_2eproto}, {
      &scc_info_AccessAuthorization_BasilTypes_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeResp_BrothServer_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::BrothServer::_UnsubscribeResp_default_instance_;
    new (ptr) ::BrothServer::UnsubscribeResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BrothServer::UnsubscribeResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnsubscribeResp_BrothServer_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UnsubscribeResp_BrothServer_2eproto}, {
      &scc_info_BasilException_BasilTypes_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_BrothServer_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_BrothServer_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_BrothServer_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_BrothServer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq, auth_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicReq, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::RegisterTopicResp, exception_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::DeregisterTopicReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::DeregisterTopicReq, auth_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::DeregisterTopicReq, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::DeregisterTopicResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::DeregisterTopicResp, exception_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq, auth_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeReq, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscribeResp, exception_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::UnsubscribeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::UnsubscribeReq, auth_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::UnsubscribeReq, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::UnsubscribeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::UnsubscribeResp, exception_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp, exception_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionMadeResp, properties_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp, exception_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SubscriptionClearResp, properties_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq, auth_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventReq, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::SendEventResp, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_FilterEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_FilterEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_FilterEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_FilterEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp, exception_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp, topic_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp, filter_),
  PROTOBUF_FIELD_OFFSET(::BrothServer::EventResp, properties_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse)},
  { 9, -1, sizeof(::BrothServer::RegisterTopicReq)},
  { 17, -1, sizeof(::BrothServer::RegisterTopicResp)},
  { 23, -1, sizeof(::BrothServer::DeregisterTopicReq)},
  { 30, -1, sizeof(::BrothServer::DeregisterTopicResp)},
  { 36, 43, sizeof(::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse)},
  { 45, -1, sizeof(::BrothServer::SubscribeReq)},
  { 53, -1, sizeof(::BrothServer::SubscribeResp)},
  { 59, -1, sizeof(::BrothServer::UnsubscribeReq)},
  { 66, -1, sizeof(::BrothServer::UnsubscribeResp)},
  { 72, 79, sizeof(::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse)},
  { 81, -1, sizeof(::BrothServer::SubscriptionMadeResp)},
  { 89, 96, sizeof(::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse)},
  { 98, -1, sizeof(::BrothServer::SubscriptionClearResp)},
  { 106, 113, sizeof(::BrothServer::SendEventReq_FeaturesEntry_DoNotUse)},
  { 115, -1, sizeof(::BrothServer::SendEventReq)},
  { 123, -1, sizeof(::BrothServer::SendEventResp)},
  { 129, 136, sizeof(::BrothServer::EventResp_FilterEntry_DoNotUse)},
  { 138, 145, sizeof(::BrothServer::EventResp_PropertiesEntry_DoNotUse)},
  { 147, -1, sizeof(::BrothServer::EventResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_RegisterTopicReq_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_RegisterTopicReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_RegisterTopicResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_DeregisterTopicReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_DeregisterTopicResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscribeReq_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscribeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscribeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_UnsubscribeReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_UnsubscribeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscriptionMadeResp_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscriptionMadeResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscriptionClearResp_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SubscriptionClearResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SendEventReq_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SendEventReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_SendEventResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_EventResp_FilterEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_EventResp_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::BrothServer::_EventResp_default_instance_),
};

const char descriptor_table_protodef_BrothServer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021BrothServer.proto\022\013BrothServer\032\020BasilT"
  "ypes.proto\"\305\001\n\020RegisterTopicReq\022,\n\004auth\030"
  "\001 \001(\0132\036.BasilType.AccessAuthorization\022\r\n"
  "\005topic\030\002 \001(\t\022A\n\nproperties\030\003 \003(\0132-.Broth"
  "Server.RegisterTopicReq.PropertiesEntry\032"
  "1\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"A\n\021RegisterTopicResp\022,\n\texcep"
  "tion\030\001 \001(\0132\031.BasilType.BasilException\"Q\n"
  "\022DeregisterTopicReq\022,\n\004auth\030\001 \001(\0132\036.Basi"
  "lType.AccessAuthorization\022\r\n\005topic\030\002 \001(\t"
  "\"C\n\023DeregisterTopicResp\022,\n\texception\030\001 \001"
  "(\0132\031.BasilType.BasilException\"\275\001\n\014Subscr"
  "ibeReq\022,\n\004auth\030\001 \001(\0132\036.BasilType.AccessA"
  "uthorization\022\r\n\005topic\030\002 \001(\t\022=\n\npropertie"
  "s\030\003 \003(\0132).BrothServer.SubscribeReq.Prope"
  "rtiesEntry\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"=\n\rSubscribeResp\022,"
  "\n\texception\030\001 \001(\0132\031.BasilType.BasilExcep"
  "tion\"M\n\016UnsubscribeReq\022,\n\004auth\030\001 \001(\0132\036.B"
  "asilType.AccessAuthorization\022\r\n\005topic\030\002 "
  "\001(\t\"\?\n\017UnsubscribeResp\022,\n\texception\030\001 \001("
  "\0132\031.BasilType.BasilException\"\315\001\n\024Subscri"
  "ptionMadeResp\022,\n\texception\030\001 \001(\0132\031.Basil"
  "Type.BasilException\022\r\n\005topic\030\002 \001(\t\022E\n\npr"
  "operties\030\003 \003(\01321.BrothServer.Subscriptio"
  "nMadeResp.PropertiesEntry\0321\n\017PropertiesE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\317\001\n"
  "\025SubscriptionClearResp\022,\n\texception\030\001 \001("
  "\0132\031.BasilType.BasilException\022\r\n\005topic\030\002 "
  "\001(\t\022F\n\nproperties\030\003 \003(\01322.BrothServer.Su"
  "bscriptionClearResp.PropertiesEntry\0321\n\017P"
  "ropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t:\0028\001\"\267\001\n\014SendEventReq\022,\n\004auth\030\001 \001(\0132\036."
  "BasilType.AccessAuthorization\022\r\n\005topic\030\002"
  " \001(\t\0229\n\010features\030\003 \003(\0132\'.BrothServer.Sen"
  "dEventReq.FeaturesEntry\032/\n\rFeaturesEntry"
  "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\036\n\rSend"
  "EventResp\022\r\n\005topic\030\002 \001(\t\"\232\002\n\tEventResp\022,"
  "\n\texception\030\001 \001(\0132\031.BasilType.BasilExcep"
  "tion\022\r\n\005topic\030\002 \001(\t\0222\n\006filter\030\003 \003(\0132\".Br"
  "othServer.EventResp.FilterEntry\022:\n\nprope"
  "rties\030\004 \003(\0132&.BrothServer.EventResp.Prop"
  "ertiesEntry\032-\n\013FilterEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017PropertiesEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\0012\205\003\n\013BrothS"
  "erver\022N\n\rRegisterTopic\022\035.BrothServer.Reg"
  "isterTopicReq\032\036.BrothServer.RegisterTopi"
  "cResp\022T\n\017DeregisterTopic\022\037.BrothServer.D"
  "eregisterTopicReq\032 .BrothServer.Deregist"
  "erTopicResp\022B\n\tSubscribe\022\031.BrothServer.S"
  "ubscribeReq\032\032.BrothServer.SubscribeResp\022"
  "H\n\013Unsubscribe\022\033.BrothServer.Unsubscribe"
  "Req\032\034.BrothServer.UnsubscribeResp\022B\n\tSen"
  "dEvent\022\031.BrothServer.SendEventReq\032\032.Brot"
  "hServer.SendEventRespB*\252\002\'org.herbal3d.b"
  "asil.protocol.BrothServerb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_BrothServer_2eproto_deps[1] = {
  &::descriptor_table_BasilTypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_BrothServer_2eproto_sccs[20] = {
  &scc_info_DeregisterTopicReq_BrothServer_2eproto.base,
  &scc_info_DeregisterTopicResp_BrothServer_2eproto.base,
  &scc_info_EventResp_BrothServer_2eproto.base,
  &scc_info_EventResp_FilterEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_EventResp_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_RegisterTopicReq_BrothServer_2eproto.base,
  &scc_info_RegisterTopicReq_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_RegisterTopicResp_BrothServer_2eproto.base,
  &scc_info_SendEventReq_BrothServer_2eproto.base,
  &scc_info_SendEventReq_FeaturesEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_SendEventResp_BrothServer_2eproto.base,
  &scc_info_SubscribeReq_BrothServer_2eproto.base,
  &scc_info_SubscribeReq_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_SubscribeResp_BrothServer_2eproto.base,
  &scc_info_SubscriptionClearResp_BrothServer_2eproto.base,
  &scc_info_SubscriptionClearResp_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_SubscriptionMadeResp_BrothServer_2eproto.base,
  &scc_info_SubscriptionMadeResp_PropertiesEntry_DoNotUse_BrothServer_2eproto.base,
  &scc_info_UnsubscribeReq_BrothServer_2eproto.base,
  &scc_info_UnsubscribeResp_BrothServer_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_BrothServer_2eproto_once;
static bool descriptor_table_BrothServer_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_BrothServer_2eproto = {
  &descriptor_table_BrothServer_2eproto_initialized, descriptor_table_protodef_BrothServer_2eproto, "BrothServer.proto", 2233,
  &descriptor_table_BrothServer_2eproto_once, descriptor_table_BrothServer_2eproto_sccs, descriptor_table_BrothServer_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_BrothServer_2eproto::offsets,
  file_level_metadata_BrothServer_2eproto, 20, file_level_enum_descriptors_BrothServer_2eproto, file_level_service_descriptors_BrothServer_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_BrothServer_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_BrothServer_2eproto), true);
namespace BrothServer {

// ===================================================================

RegisterTopicReq_PropertiesEntry_DoNotUse::RegisterTopicReq_PropertiesEntry_DoNotUse() {}
RegisterTopicReq_PropertiesEntry_DoNotUse::RegisterTopicReq_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RegisterTopicReq_PropertiesEntry_DoNotUse::MergeFrom(const RegisterTopicReq_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RegisterTopicReq_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void RegisterTopicReq_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void RegisterTopicReq::InitAsDefaultInstance() {
  ::BrothServer::_RegisterTopicReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class RegisterTopicReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const RegisterTopicReq* msg);
};

const ::BasilType::AccessAuthorization&
RegisterTopicReq::HasBitSetters::auth(const RegisterTopicReq* msg) {
  return *msg->auth_;
}
void RegisterTopicReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterTopicReq::kAuthFieldNumber;
const int RegisterTopicReq::kTopicFieldNumber;
const int RegisterTopicReq::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterTopicReq::RegisterTopicReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.RegisterTopicReq)
}
RegisterTopicReq::RegisterTopicReq(const RegisterTopicReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.RegisterTopicReq)
}

void RegisterTopicReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterTopicReq_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_ = nullptr;
}

RegisterTopicReq::~RegisterTopicReq() {
  // @@protoc_insertion_point(destructor:BrothServer.RegisterTopicReq)
  SharedDtor();
}

void RegisterTopicReq::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void RegisterTopicReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterTopicReq& RegisterTopicReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterTopicReq_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void RegisterTopicReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.RegisterTopicReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterTopicReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.RegisterTopicReq.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterTopicReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.RegisterTopicReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.RegisterTopicReq.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          RegisterTopicReq_PropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              RegisterTopicReq_PropertiesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.RegisterTopicReq.PropertiesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.RegisterTopicReq.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.RegisterTopicReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.RegisterTopicReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterTopicReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.RegisterTopicReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.RegisterTopicReq.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.RegisterTopicReq.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.RegisterTopicReq.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        RegisterTopicReq_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        RegisterTopicReq_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.RegisterTopicReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterTopicReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.RegisterTopicReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.RegisterTopicReq.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.RegisterTopicReq.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.RegisterTopicReq.PropertiesEntry.value");
      }
    };

    if (false &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = RegisterTopicReq_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        target = RegisterTopicReq_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.RegisterTopicReq)
  return target;
}

size_t RegisterTopicReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.RegisterTopicReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->properties().begin();
      it != this->properties().end(); ++it) {
    total_size += RegisterTopicReq_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterTopicReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.RegisterTopicReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterTopicReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterTopicReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.RegisterTopicReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.RegisterTopicReq)
    MergeFrom(*source);
  }
}

void RegisterTopicReq::MergeFrom(const RegisterTopicReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.RegisterTopicReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void RegisterTopicReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.RegisterTopicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterTopicReq::CopyFrom(const RegisterTopicReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.RegisterTopicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterTopicReq::IsInitialized() const {
  return true;
}

void RegisterTopicReq::Swap(RegisterTopicReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterTopicReq::InternalSwap(RegisterTopicReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterTopicReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterTopicResp::InitAsDefaultInstance() {
  ::BrothServer::_RegisterTopicResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class RegisterTopicResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const RegisterTopicResp* msg);
};

const ::BasilType::BasilException&
RegisterTopicResp::HasBitSetters::exception(const RegisterTopicResp* msg) {
  return *msg->exception_;
}
void RegisterTopicResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterTopicResp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterTopicResp::RegisterTopicResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.RegisterTopicResp)
}
RegisterTopicResp::RegisterTopicResp(const RegisterTopicResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.RegisterTopicResp)
}

void RegisterTopicResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterTopicResp_BrothServer_2eproto.base);
  exception_ = nullptr;
}

RegisterTopicResp::~RegisterTopicResp() {
  // @@protoc_insertion_point(destructor:BrothServer.RegisterTopicResp)
  SharedDtor();
}

void RegisterTopicResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void RegisterTopicResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterTopicResp& RegisterTopicResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterTopicResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void RegisterTopicResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.RegisterTopicResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RegisterTopicResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RegisterTopicResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.RegisterTopicResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.RegisterTopicResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.RegisterTopicResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RegisterTopicResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.RegisterTopicResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.RegisterTopicResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterTopicResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.RegisterTopicResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.RegisterTopicResp)
  return target;
}

size_t RegisterTopicResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.RegisterTopicResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterTopicResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.RegisterTopicResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterTopicResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterTopicResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.RegisterTopicResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.RegisterTopicResp)
    MergeFrom(*source);
  }
}

void RegisterTopicResp::MergeFrom(const RegisterTopicResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.RegisterTopicResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void RegisterTopicResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.RegisterTopicResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterTopicResp::CopyFrom(const RegisterTopicResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.RegisterTopicResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterTopicResp::IsInitialized() const {
  return true;
}

void RegisterTopicResp::Swap(RegisterTopicResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterTopicResp::InternalSwap(RegisterTopicResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterTopicResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeregisterTopicReq::InitAsDefaultInstance() {
  ::BrothServer::_DeregisterTopicReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class DeregisterTopicReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const DeregisterTopicReq* msg);
};

const ::BasilType::AccessAuthorization&
DeregisterTopicReq::HasBitSetters::auth(const DeregisterTopicReq* msg) {
  return *msg->auth_;
}
void DeregisterTopicReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterTopicReq::kAuthFieldNumber;
const int DeregisterTopicReq::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterTopicReq::DeregisterTopicReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.DeregisterTopicReq)
}
DeregisterTopicReq::DeregisterTopicReq(const DeregisterTopicReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.DeregisterTopicReq)
}

void DeregisterTopicReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeregisterTopicReq_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_ = nullptr;
}

DeregisterTopicReq::~DeregisterTopicReq() {
  // @@protoc_insertion_point(destructor:BrothServer.DeregisterTopicReq)
  SharedDtor();
}

void DeregisterTopicReq::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void DeregisterTopicReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregisterTopicReq& DeregisterTopicReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeregisterTopicReq_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void DeregisterTopicReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.DeregisterTopicReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeregisterTopicReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.DeregisterTopicReq.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeregisterTopicReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.DeregisterTopicReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.DeregisterTopicReq.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.DeregisterTopicReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.DeregisterTopicReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeregisterTopicReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.DeregisterTopicReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.DeregisterTopicReq.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.DeregisterTopicReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeregisterTopicReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.DeregisterTopicReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.DeregisterTopicReq.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.DeregisterTopicReq)
  return target;
}

size_t DeregisterTopicReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.DeregisterTopicReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregisterTopicReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.DeregisterTopicReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterTopicReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeregisterTopicReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.DeregisterTopicReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.DeregisterTopicReq)
    MergeFrom(*source);
  }
}

void DeregisterTopicReq::MergeFrom(const DeregisterTopicReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.DeregisterTopicReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void DeregisterTopicReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.DeregisterTopicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterTopicReq::CopyFrom(const DeregisterTopicReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.DeregisterTopicReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterTopicReq::IsInitialized() const {
  return true;
}

void DeregisterTopicReq::Swap(DeregisterTopicReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregisterTopicReq::InternalSwap(DeregisterTopicReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregisterTopicReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeregisterTopicResp::InitAsDefaultInstance() {
  ::BrothServer::_DeregisterTopicResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class DeregisterTopicResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const DeregisterTopicResp* msg);
};

const ::BasilType::BasilException&
DeregisterTopicResp::HasBitSetters::exception(const DeregisterTopicResp* msg) {
  return *msg->exception_;
}
void DeregisterTopicResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeregisterTopicResp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeregisterTopicResp::DeregisterTopicResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.DeregisterTopicResp)
}
DeregisterTopicResp::DeregisterTopicResp(const DeregisterTopicResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.DeregisterTopicResp)
}

void DeregisterTopicResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeregisterTopicResp_BrothServer_2eproto.base);
  exception_ = nullptr;
}

DeregisterTopicResp::~DeregisterTopicResp() {
  // @@protoc_insertion_point(destructor:BrothServer.DeregisterTopicResp)
  SharedDtor();
}

void DeregisterTopicResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void DeregisterTopicResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeregisterTopicResp& DeregisterTopicResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeregisterTopicResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void DeregisterTopicResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.DeregisterTopicResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeregisterTopicResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeregisterTopicResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.DeregisterTopicResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.DeregisterTopicResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.DeregisterTopicResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeregisterTopicResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.DeregisterTopicResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.DeregisterTopicResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeregisterTopicResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.DeregisterTopicResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.DeregisterTopicResp)
  return target;
}

size_t DeregisterTopicResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.DeregisterTopicResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeregisterTopicResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.DeregisterTopicResp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeregisterTopicResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeregisterTopicResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.DeregisterTopicResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.DeregisterTopicResp)
    MergeFrom(*source);
  }
}

void DeregisterTopicResp::MergeFrom(const DeregisterTopicResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.DeregisterTopicResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void DeregisterTopicResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.DeregisterTopicResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeregisterTopicResp::CopyFrom(const DeregisterTopicResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.DeregisterTopicResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeregisterTopicResp::IsInitialized() const {
  return true;
}

void DeregisterTopicResp::Swap(DeregisterTopicResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeregisterTopicResp::InternalSwap(DeregisterTopicResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeregisterTopicResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SubscribeReq_PropertiesEntry_DoNotUse::SubscribeReq_PropertiesEntry_DoNotUse() {}
SubscribeReq_PropertiesEntry_DoNotUse::SubscribeReq_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SubscribeReq_PropertiesEntry_DoNotUse::MergeFrom(const SubscribeReq_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReq_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SubscribeReq_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SubscribeReq::InitAsDefaultInstance() {
  ::BrothServer::_SubscribeReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class SubscribeReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const SubscribeReq* msg);
};

const ::BasilType::AccessAuthorization&
SubscribeReq::HasBitSetters::auth(const SubscribeReq* msg) {
  return *msg->auth_;
}
void SubscribeReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeReq::kAuthFieldNumber;
const int SubscribeReq::kTopicFieldNumber;
const int SubscribeReq::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeReq::SubscribeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.SubscribeReq)
}
SubscribeReq::SubscribeReq(const SubscribeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.SubscribeReq)
}

void SubscribeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeReq_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_ = nullptr;
}

SubscribeReq::~SubscribeReq() {
  // @@protoc_insertion_point(destructor:BrothServer.SubscribeReq)
  SharedDtor();
}

void SubscribeReq::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void SubscribeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeReq& SubscribeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeReq_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void SubscribeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.SubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.SubscribeReq.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.SubscribeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscribeReq.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          SubscribeReq_PropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SubscribeReq_PropertiesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscribeReq.PropertiesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscribeReq.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.SubscribeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.SubscribeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.SubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SubscribeReq.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscribeReq.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscribeReq.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SubscribeReq_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        SubscribeReq_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.SubscribeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.SubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SubscribeReq.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscribeReq.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscribeReq.PropertiesEntry.value");
      }
    };

    if (false &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SubscribeReq_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        target = SubscribeReq_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.SubscribeReq)
  return target;
}

size_t SubscribeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.SubscribeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->properties().begin();
      it != this->properties().end(); ++it) {
    total_size += SubscribeReq_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.SubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.SubscribeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.SubscribeReq)
    MergeFrom(*source);
  }
}

void SubscribeReq::MergeFrom(const SubscribeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.SubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void SubscribeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.SubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeReq::CopyFrom(const SubscribeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.SubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeReq::IsInitialized() const {
  return true;
}

void SubscribeReq::Swap(SubscribeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeReq::InternalSwap(SubscribeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResp::InitAsDefaultInstance() {
  ::BrothServer::_SubscribeResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class SubscribeResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const SubscribeResp* msg);
};

const ::BasilType::BasilException&
SubscribeResp::HasBitSetters::exception(const SubscribeResp* msg) {
  return *msg->exception_;
}
void SubscribeResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscribeResp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeResp::SubscribeResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.SubscribeResp)
}
SubscribeResp::SubscribeResp(const SubscribeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.SubscribeResp)
}

void SubscribeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResp_BrothServer_2eproto.base);
  exception_ = nullptr;
}

SubscribeResp::~SubscribeResp() {
  // @@protoc_insertion_point(destructor:BrothServer.SubscribeResp)
  SharedDtor();
}

void SubscribeResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void SubscribeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResp& SubscribeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.SubscribeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.SubscribeResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.SubscribeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.SubscribeResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscribeResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.SubscribeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.SubscribeResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.SubscribeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.SubscribeResp)
  return target;
}

size_t SubscribeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.SubscribeResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.SubscribeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.SubscribeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.SubscribeResp)
    MergeFrom(*source);
  }
}

void SubscribeResp::MergeFrom(const SubscribeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.SubscribeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void SubscribeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.SubscribeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResp::CopyFrom(const SubscribeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.SubscribeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResp::IsInitialized() const {
  return true;
}

void SubscribeResp::Swap(SubscribeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeResp::InternalSwap(SubscribeResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeReq::InitAsDefaultInstance() {
  ::BrothServer::_UnsubscribeReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class UnsubscribeReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const UnsubscribeReq* msg);
};

const ::BasilType::AccessAuthorization&
UnsubscribeReq::HasBitSetters::auth(const UnsubscribeReq* msg) {
  return *msg->auth_;
}
void UnsubscribeReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsubscribeReq::kAuthFieldNumber;
const int UnsubscribeReq::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsubscribeReq::UnsubscribeReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.UnsubscribeReq)
}
UnsubscribeReq::UnsubscribeReq(const UnsubscribeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.UnsubscribeReq)
}

void UnsubscribeReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeReq_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_ = nullptr;
}

UnsubscribeReq::~UnsubscribeReq() {
  // @@protoc_insertion_point(destructor:BrothServer.UnsubscribeReq)
  SharedDtor();
}

void UnsubscribeReq::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void UnsubscribeReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeReq& UnsubscribeReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeReq_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.UnsubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnsubscribeReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.UnsubscribeReq.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnsubscribeReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.UnsubscribeReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.UnsubscribeReq.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.UnsubscribeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.UnsubscribeReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnsubscribeReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.UnsubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.UnsubscribeReq.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.UnsubscribeReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.UnsubscribeReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.UnsubscribeReq.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.UnsubscribeReq)
  return target;
}

size_t UnsubscribeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.UnsubscribeReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.UnsubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.UnsubscribeReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.UnsubscribeReq)
    MergeFrom(*source);
  }
}

void UnsubscribeReq::MergeFrom(const UnsubscribeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.UnsubscribeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void UnsubscribeReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.UnsubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeReq::CopyFrom(const UnsubscribeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.UnsubscribeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeReq::IsInitialized() const {
  return true;
}

void UnsubscribeReq::Swap(UnsubscribeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsubscribeReq::InternalSwap(UnsubscribeReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeResp::InitAsDefaultInstance() {
  ::BrothServer::_UnsubscribeResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class UnsubscribeResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const UnsubscribeResp* msg);
};

const ::BasilType::BasilException&
UnsubscribeResp::HasBitSetters::exception(const UnsubscribeResp* msg) {
  return *msg->exception_;
}
void UnsubscribeResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnsubscribeResp::kExceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnsubscribeResp::UnsubscribeResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.UnsubscribeResp)
}
UnsubscribeResp::UnsubscribeResp(const UnsubscribeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.UnsubscribeResp)
}

void UnsubscribeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeResp_BrothServer_2eproto.base);
  exception_ = nullptr;
}

UnsubscribeResp::~UnsubscribeResp() {
  // @@protoc_insertion_point(destructor:BrothServer.UnsubscribeResp)
  SharedDtor();
}

void UnsubscribeResp::SharedDtor() {
  if (this != internal_default_instance()) delete exception_;
}

void UnsubscribeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeResp& UnsubscribeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.UnsubscribeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UnsubscribeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UnsubscribeResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.UnsubscribeResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.UnsubscribeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.UnsubscribeResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UnsubscribeResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.UnsubscribeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.UnsubscribeResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.UnsubscribeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.UnsubscribeResp)
  return target;
}

size_t UnsubscribeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.UnsubscribeResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.UnsubscribeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.UnsubscribeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.UnsubscribeResp)
    MergeFrom(*source);
  }
}

void UnsubscribeResp::MergeFrom(const UnsubscribeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.UnsubscribeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void UnsubscribeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.UnsubscribeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeResp::CopyFrom(const UnsubscribeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.UnsubscribeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeResp::IsInitialized() const {
  return true;
}

void UnsubscribeResp::Swap(UnsubscribeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnsubscribeResp::InternalSwap(UnsubscribeResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SubscriptionMadeResp_PropertiesEntry_DoNotUse::SubscriptionMadeResp_PropertiesEntry_DoNotUse() {}
SubscriptionMadeResp_PropertiesEntry_DoNotUse::SubscriptionMadeResp_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SubscriptionMadeResp_PropertiesEntry_DoNotUse::MergeFrom(const SubscriptionMadeResp_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionMadeResp_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SubscriptionMadeResp_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SubscriptionMadeResp::InitAsDefaultInstance() {
  ::BrothServer::_SubscriptionMadeResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class SubscriptionMadeResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const SubscriptionMadeResp* msg);
};

const ::BasilType::BasilException&
SubscriptionMadeResp::HasBitSetters::exception(const SubscriptionMadeResp* msg) {
  return *msg->exception_;
}
void SubscriptionMadeResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionMadeResp::kExceptionFieldNumber;
const int SubscriptionMadeResp::kTopicFieldNumber;
const int SubscriptionMadeResp::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionMadeResp::SubscriptionMadeResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.SubscriptionMadeResp)
}
SubscriptionMadeResp::SubscriptionMadeResp(const SubscriptionMadeResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.SubscriptionMadeResp)
}

void SubscriptionMadeResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionMadeResp_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exception_ = nullptr;
}

SubscriptionMadeResp::~SubscriptionMadeResp() {
  // @@protoc_insertion_point(destructor:BrothServer.SubscriptionMadeResp)
  SharedDtor();
}

void SubscriptionMadeResp::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exception_;
}

void SubscriptionMadeResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionMadeResp& SubscriptionMadeResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionMadeResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionMadeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.SubscriptionMadeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriptionMadeResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.SubscriptionMadeResp.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriptionMadeResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.SubscriptionMadeResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscriptionMadeResp.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          SubscriptionMadeResp_PropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SubscriptionMadeResp_PropertiesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscriptionMadeResp.PropertiesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscriptionMadeResp.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.SubscriptionMadeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.SubscriptionMadeResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriptionMadeResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.SubscriptionMadeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SubscriptionMadeResp.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionMadeResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionMadeResp.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SubscriptionMadeResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        SubscriptionMadeResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.SubscriptionMadeResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionMadeResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.SubscriptionMadeResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SubscriptionMadeResp.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionMadeResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionMadeResp.PropertiesEntry.value");
      }
    };

    if (false &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SubscriptionMadeResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        target = SubscriptionMadeResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.SubscriptionMadeResp)
  return target;
}

size_t SubscriptionMadeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.SubscriptionMadeResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->properties().begin();
      it != this->properties().end(); ++it) {
    total_size += SubscriptionMadeResp_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionMadeResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.SubscriptionMadeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionMadeResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionMadeResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.SubscriptionMadeResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.SubscriptionMadeResp)
    MergeFrom(*source);
  }
}

void SubscriptionMadeResp::MergeFrom(const SubscriptionMadeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.SubscriptionMadeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void SubscriptionMadeResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.SubscriptionMadeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionMadeResp::CopyFrom(const SubscriptionMadeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.SubscriptionMadeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionMadeResp::IsInitialized() const {
  return true;
}

void SubscriptionMadeResp::Swap(SubscriptionMadeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionMadeResp::InternalSwap(SubscriptionMadeResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionMadeResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SubscriptionClearResp_PropertiesEntry_DoNotUse::SubscriptionClearResp_PropertiesEntry_DoNotUse() {}
SubscriptionClearResp_PropertiesEntry_DoNotUse::SubscriptionClearResp_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SubscriptionClearResp_PropertiesEntry_DoNotUse::MergeFrom(const SubscriptionClearResp_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionClearResp_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SubscriptionClearResp_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SubscriptionClearResp::InitAsDefaultInstance() {
  ::BrothServer::_SubscriptionClearResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class SubscriptionClearResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const SubscriptionClearResp* msg);
};

const ::BasilType::BasilException&
SubscriptionClearResp::HasBitSetters::exception(const SubscriptionClearResp* msg) {
  return *msg->exception_;
}
void SubscriptionClearResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubscriptionClearResp::kExceptionFieldNumber;
const int SubscriptionClearResp::kTopicFieldNumber;
const int SubscriptionClearResp::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscriptionClearResp::SubscriptionClearResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.SubscriptionClearResp)
}
SubscriptionClearResp::SubscriptionClearResp(const SubscriptionClearResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.SubscriptionClearResp)
}

void SubscriptionClearResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscriptionClearResp_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exception_ = nullptr;
}

SubscriptionClearResp::~SubscriptionClearResp() {
  // @@protoc_insertion_point(destructor:BrothServer.SubscriptionClearResp)
  SharedDtor();
}

void SubscriptionClearResp::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exception_;
}

void SubscriptionClearResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscriptionClearResp& SubscriptionClearResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscriptionClearResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void SubscriptionClearResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.SubscriptionClearResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscriptionClearResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.SubscriptionClearResp.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscriptionClearResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.SubscriptionClearResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscriptionClearResp.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          SubscriptionClearResp_PropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SubscriptionClearResp_PropertiesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscriptionClearResp.PropertiesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SubscriptionClearResp.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.SubscriptionClearResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.SubscriptionClearResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubscriptionClearResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.SubscriptionClearResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SubscriptionClearResp.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionClearResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionClearResp.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SubscriptionClearResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        SubscriptionClearResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.SubscriptionClearResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscriptionClearResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.SubscriptionClearResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SubscriptionClearResp.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // map<string, string> properties = 3;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionClearResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SubscriptionClearResp.PropertiesEntry.value");
      }
    };

    if (false &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SubscriptionClearResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        target = SubscriptionClearResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.SubscriptionClearResp)
  return target;
}

size_t SubscriptionClearResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.SubscriptionClearResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->properties().begin();
      it != this->properties().end(); ++it) {
    total_size += SubscriptionClearResp_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscriptionClearResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.SubscriptionClearResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscriptionClearResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscriptionClearResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.SubscriptionClearResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.SubscriptionClearResp)
    MergeFrom(*source);
  }
}

void SubscriptionClearResp::MergeFrom(const SubscriptionClearResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.SubscriptionClearResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void SubscriptionClearResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.SubscriptionClearResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscriptionClearResp::CopyFrom(const SubscriptionClearResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.SubscriptionClearResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionClearResp::IsInitialized() const {
  return true;
}

void SubscriptionClearResp::Swap(SubscriptionClearResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscriptionClearResp::InternalSwap(SubscriptionClearResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionClearResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SendEventReq_FeaturesEntry_DoNotUse::SendEventReq_FeaturesEntry_DoNotUse() {}
SendEventReq_FeaturesEntry_DoNotUse::SendEventReq_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SendEventReq_FeaturesEntry_DoNotUse::MergeFrom(const SendEventReq_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SendEventReq_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SendEventReq_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SendEventReq::InitAsDefaultInstance() {
  ::BrothServer::_SendEventReq_default_instance_._instance.get_mutable()->auth_ = const_cast< ::BasilType::AccessAuthorization*>(
      ::BasilType::AccessAuthorization::internal_default_instance());
}
class SendEventReq::HasBitSetters {
 public:
  static const ::BasilType::AccessAuthorization& auth(const SendEventReq* msg);
};

const ::BasilType::AccessAuthorization&
SendEventReq::HasBitSetters::auth(const SendEventReq* msg) {
  return *msg->auth_;
}
void SendEventReq::clear_auth() {
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendEventReq::kAuthFieldNumber;
const int SendEventReq::kTopicFieldNumber;
const int SendEventReq::kFeaturesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendEventReq::SendEventReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.SendEventReq)
}
SendEventReq::SendEventReq(const SendEventReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    auth_ = new ::BasilType::AccessAuthorization(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.SendEventReq)
}

void SendEventReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendEventReq_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_ = nullptr;
}

SendEventReq::~SendEventReq() {
  // @@protoc_insertion_point(destructor:BrothServer.SendEventReq)
  SharedDtor();
}

void SendEventReq::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete auth_;
}

void SendEventReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendEventReq& SendEventReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendEventReq_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void SendEventReq::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.SendEventReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendEventReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_auth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.SendEventReq.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> features = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendEventReq::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.SendEventReq)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.AccessAuthorization auth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_auth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SendEventReq.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> features = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          SendEventReq_FeaturesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SendEventReq_FeaturesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&features_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SendEventReq.FeaturesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SendEventReq.FeaturesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.SendEventReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.SendEventReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SendEventReq::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.SendEventReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::auth(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SendEventReq.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // map<string, string> features = 3;
  if (!this->features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SendEventReq.FeaturesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SendEventReq.FeaturesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SendEventReq_FeaturesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        SendEventReq_FeaturesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.SendEventReq)
}

::PROTOBUF_NAMESPACE_ID::uint8* SendEventReq::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.SendEventReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::auth(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SendEventReq.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // map<string, string> features = 3;
  if (!this->features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SendEventReq.FeaturesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.SendEventReq.FeaturesEntry.value");
      }
    };

    if (false &&
        this->features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SendEventReq_FeaturesEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->features().begin();
          it != this->features().end(); ++it) {
        target = SendEventReq_FeaturesEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.SendEventReq)
  return target;
}

size_t SendEventReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.SendEventReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> features = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->features().begin();
      it != this->features().end(); ++it) {
    total_size += SendEventReq_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.AccessAuthorization auth = 1;
  if (this->has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendEventReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.SendEventReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SendEventReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendEventReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.SendEventReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.SendEventReq)
    MergeFrom(*source);
  }
}

void SendEventReq::MergeFrom(const SendEventReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.SendEventReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_auth()) {
    mutable_auth()->::BasilType::AccessAuthorization::MergeFrom(from.auth());
  }
}

void SendEventReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.SendEventReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendEventReq::CopyFrom(const SendEventReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.SendEventReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendEventReq::IsInitialized() const {
  return true;
}

void SendEventReq::Swap(SendEventReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendEventReq::InternalSwap(SendEventReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.Swap(&other->features_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendEventReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendEventResp::InitAsDefaultInstance() {
}
class SendEventResp::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendEventResp::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendEventResp::SendEventResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.SendEventResp)
}
SendEventResp::SendEventResp(const SendEventResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.SendEventResp)
}

void SendEventResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendEventResp_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendEventResp::~SendEventResp() {
  // @@protoc_insertion_point(destructor:BrothServer.SendEventResp)
  SharedDtor();
}

void SendEventResp::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendEventResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendEventResp& SendEventResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendEventResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void SendEventResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.SendEventResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendEventResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.SendEventResp.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendEventResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.SendEventResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.SendEventResp.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.SendEventResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.SendEventResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SendEventResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.SendEventResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SendEventResp.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.SendEventResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* SendEventResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.SendEventResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.SendEventResp.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.SendEventResp)
  return target;
}

size_t SendEventResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.SendEventResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendEventResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.SendEventResp)
  GOOGLE_DCHECK_NE(&from, this);
  const SendEventResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendEventResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.SendEventResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.SendEventResp)
    MergeFrom(*source);
  }
}

void SendEventResp::MergeFrom(const SendEventResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.SendEventResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
}

void SendEventResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.SendEventResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendEventResp::CopyFrom(const SendEventResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.SendEventResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendEventResp::IsInitialized() const {
  return true;
}

void SendEventResp::Swap(SendEventResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendEventResp::InternalSwap(SendEventResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendEventResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EventResp_FilterEntry_DoNotUse::EventResp_FilterEntry_DoNotUse() {}
EventResp_FilterEntry_DoNotUse::EventResp_FilterEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EventResp_FilterEntry_DoNotUse::MergeFrom(const EventResp_FilterEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EventResp_FilterEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EventResp_FilterEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

EventResp_PropertiesEntry_DoNotUse::EventResp_PropertiesEntry_DoNotUse() {}
EventResp_PropertiesEntry_DoNotUse::EventResp_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EventResp_PropertiesEntry_DoNotUse::MergeFrom(const EventResp_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EventResp_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EventResp_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EventResp::InitAsDefaultInstance() {
  ::BrothServer::_EventResp_default_instance_._instance.get_mutable()->exception_ = const_cast< ::BasilType::BasilException*>(
      ::BasilType::BasilException::internal_default_instance());
}
class EventResp::HasBitSetters {
 public:
  static const ::BasilType::BasilException& exception(const EventResp* msg);
};

const ::BasilType::BasilException&
EventResp::HasBitSetters::exception(const EventResp* msg) {
  return *msg->exception_;
}
void EventResp::clear_exception() {
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventResp::kExceptionFieldNumber;
const int EventResp::kTopicFieldNumber;
const int EventResp::kFilterFieldNumber;
const int EventResp::kPropertiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventResp::EventResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BrothServer.EventResp)
}
EventResp::EventResp(const EventResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.MergeFrom(from.filter_);
  properties_.MergeFrom(from.properties_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_exception()) {
    exception_ = new ::BasilType::BasilException(*from.exception_);
  } else {
    exception_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:BrothServer.EventResp)
}

void EventResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventResp_BrothServer_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exception_ = nullptr;
}

EventResp::~EventResp() {
  // @@protoc_insertion_point(destructor:BrothServer.EventResp)
  SharedDtor();
}

void EventResp::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exception_;
}

void EventResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventResp& EventResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventResp_BrothServer_2eproto.base);
  return *internal_default_instance();
}


void EventResp::Clear() {
// @@protoc_insertion_point(message_clear_start:BrothServer.EventResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_.Clear();
  properties_.Clear();
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && exception_ != nullptr) {
    delete exception_;
  }
  exception_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EventResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BasilType.BasilException exception = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_exception(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_topic(), ptr, ctx, "BrothServer.EventResp.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&filter_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EventResp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BrothServer.EventResp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BasilType.BasilException exception = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.EventResp.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> filter = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          EventResp_FilterEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EventResp_FilterEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&filter_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.EventResp.FilterEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.EventResp.FilterEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> properties = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          EventResp_PropertiesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              EventResp_PropertiesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&properties_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.EventResp.PropertiesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BrothServer.EventResp.PropertiesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BrothServer.EventResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BrothServer.EventResp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EventResp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BrothServer.EventResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::exception(this), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.EventResp.topic");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // map<string, string> filter = 3;
  if (!this->filter().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.FilterEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.FilterEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->filter().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->filter().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->filter().begin();
          it != this->filter().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EventResp_FilterEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->filter().begin();
          it != this->filter().end(); ++it) {
        EventResp_FilterEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.PropertiesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        EventResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        EventResp_PropertiesEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BrothServer.EventResp)
}

::PROTOBUF_NAMESPACE_ID::uint8* EventResp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BrothServer.EventResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::exception(this), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BrothServer.EventResp.topic");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // map<string, string> filter = 3;
  if (!this->filter().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.FilterEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.FilterEntry.value");
      }
    };

    if (false &&
        this->filter().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->filter().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->filter().begin();
          it != this->filter().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EventResp_FilterEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->filter().begin();
          it != this->filter().end(); ++it) {
        target = EventResp_FilterEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> properties = 4;
  if (!this->properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BrothServer.EventResp.PropertiesEntry.value");
      }
    };

    if (false &&
        this->properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EventResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->properties().begin();
          it != this->properties().end(); ++it) {
        target = EventResp_PropertiesEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BrothServer.EventResp)
  return target;
}

size_t EventResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BrothServer.EventResp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> filter = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->filter_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->filter().begin();
      it != this->filter().end(); ++it) {
    total_size += EventResp_FilterEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> properties = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->properties().begin();
      it != this->properties().end(); ++it) {
    total_size += EventResp_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .BasilType.BasilException exception = 1;
  if (this->has_exception()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exception_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BrothServer.EventResp)
  GOOGLE_DCHECK_NE(&from, this);
  const EventResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BrothServer.EventResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BrothServer.EventResp)
    MergeFrom(*source);
  }
}

void EventResp::MergeFrom(const EventResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BrothServer.EventResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filter_.MergeFrom(from.filter_);
  properties_.MergeFrom(from.properties_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_exception()) {
    mutable_exception()->::BasilType::BasilException::MergeFrom(from.exception());
  }
}

void EventResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BrothServer.EventResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventResp::CopyFrom(const EventResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BrothServer.EventResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventResp::IsInitialized() const {
  return true;
}

void EventResp::Swap(EventResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventResp::InternalSwap(EventResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filter_.Swap(&other->filter_);
  properties_.Swap(&other->properties_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exception_, other->exception_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventResp::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace BrothServer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::RegisterTopicReq* Arena::CreateMaybeMessage< ::BrothServer::RegisterTopicReq >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::RegisterTopicReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::RegisterTopicResp* Arena::CreateMaybeMessage< ::BrothServer::RegisterTopicResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::RegisterTopicResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::DeregisterTopicReq* Arena::CreateMaybeMessage< ::BrothServer::DeregisterTopicReq >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::DeregisterTopicReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::DeregisterTopicResp* Arena::CreateMaybeMessage< ::BrothServer::DeregisterTopicResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::DeregisterTopicResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscribeReq* Arena::CreateMaybeMessage< ::BrothServer::SubscribeReq >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscribeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscribeResp* Arena::CreateMaybeMessage< ::BrothServer::SubscribeResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscribeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::UnsubscribeReq* Arena::CreateMaybeMessage< ::BrothServer::UnsubscribeReq >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::UnsubscribeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::UnsubscribeResp* Arena::CreateMaybeMessage< ::BrothServer::UnsubscribeResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::UnsubscribeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscriptionMadeResp* Arena::CreateMaybeMessage< ::BrothServer::SubscriptionMadeResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscriptionMadeResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SubscriptionClearResp* Arena::CreateMaybeMessage< ::BrothServer::SubscriptionClearResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SubscriptionClearResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SendEventReq_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::SendEventReq_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SendEventReq_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SendEventReq* Arena::CreateMaybeMessage< ::BrothServer::SendEventReq >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SendEventReq >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::SendEventResp* Arena::CreateMaybeMessage< ::BrothServer::SendEventResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::SendEventResp >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::EventResp_FilterEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::EventResp_FilterEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::EventResp_FilterEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::EventResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::BrothServer::EventResp_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::EventResp_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BrothServer::EventResp* Arena::CreateMaybeMessage< ::BrothServer::EventResp >(Arena* arena) {
  return Arena::CreateInternal< ::BrothServer::EventResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
