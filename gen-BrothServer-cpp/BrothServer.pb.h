// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BrothServer.proto

#ifndef PROTOBUF_INCLUDED_BrothServer_2eproto
#define PROTOBUF_INCLUDED_BrothServer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google
#include "BasilTypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_BrothServer_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_BrothServer_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_BrothServer_2eproto();
namespace BrothServer {
class DeregisterTopicReq;
class DeregisterTopicReqDefaultTypeInternal;
extern DeregisterTopicReqDefaultTypeInternal _DeregisterTopicReq_default_instance_;
class DeregisterTopicResp;
class DeregisterTopicRespDefaultTypeInternal;
extern DeregisterTopicRespDefaultTypeInternal _DeregisterTopicResp_default_instance_;
class EventResp;
class EventRespDefaultTypeInternal;
extern EventRespDefaultTypeInternal _EventResp_default_instance_;
class EventResp_FilterEntry_DoNotUse;
class EventResp_FilterEntry_DoNotUseDefaultTypeInternal;
extern EventResp_FilterEntry_DoNotUseDefaultTypeInternal _EventResp_FilterEntry_DoNotUse_default_instance_;
class EventResp_PropertiesEntry_DoNotUse;
class EventResp_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern EventResp_PropertiesEntry_DoNotUseDefaultTypeInternal _EventResp_PropertiesEntry_DoNotUse_default_instance_;
class RegisterTopicReq;
class RegisterTopicReqDefaultTypeInternal;
extern RegisterTopicReqDefaultTypeInternal _RegisterTopicReq_default_instance_;
class RegisterTopicReq_PropertiesEntry_DoNotUse;
class RegisterTopicReq_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern RegisterTopicReq_PropertiesEntry_DoNotUseDefaultTypeInternal _RegisterTopicReq_PropertiesEntry_DoNotUse_default_instance_;
class RegisterTopicResp;
class RegisterTopicRespDefaultTypeInternal;
extern RegisterTopicRespDefaultTypeInternal _RegisterTopicResp_default_instance_;
class SendEventReq;
class SendEventReqDefaultTypeInternal;
extern SendEventReqDefaultTypeInternal _SendEventReq_default_instance_;
class SendEventReq_FeaturesEntry_DoNotUse;
class SendEventReq_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern SendEventReq_FeaturesEntry_DoNotUseDefaultTypeInternal _SendEventReq_FeaturesEntry_DoNotUse_default_instance_;
class SendEventResp;
class SendEventRespDefaultTypeInternal;
extern SendEventRespDefaultTypeInternal _SendEventResp_default_instance_;
class SubscribeReq;
class SubscribeReqDefaultTypeInternal;
extern SubscribeReqDefaultTypeInternal _SubscribeReq_default_instance_;
class SubscribeReq_PropertiesEntry_DoNotUse;
class SubscribeReq_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern SubscribeReq_PropertiesEntry_DoNotUseDefaultTypeInternal _SubscribeReq_PropertiesEntry_DoNotUse_default_instance_;
class SubscribeResp;
class SubscribeRespDefaultTypeInternal;
extern SubscribeRespDefaultTypeInternal _SubscribeResp_default_instance_;
class SubscriptionClearResp;
class SubscriptionClearRespDefaultTypeInternal;
extern SubscriptionClearRespDefaultTypeInternal _SubscriptionClearResp_default_instance_;
class SubscriptionClearResp_PropertiesEntry_DoNotUse;
class SubscriptionClearResp_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern SubscriptionClearResp_PropertiesEntry_DoNotUseDefaultTypeInternal _SubscriptionClearResp_PropertiesEntry_DoNotUse_default_instance_;
class SubscriptionMadeResp;
class SubscriptionMadeRespDefaultTypeInternal;
extern SubscriptionMadeRespDefaultTypeInternal _SubscriptionMadeResp_default_instance_;
class SubscriptionMadeResp_PropertiesEntry_DoNotUse;
class SubscriptionMadeResp_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern SubscriptionMadeResp_PropertiesEntry_DoNotUseDefaultTypeInternal _SubscriptionMadeResp_PropertiesEntry_DoNotUse_default_instance_;
class UnsubscribeReq;
class UnsubscribeReqDefaultTypeInternal;
extern UnsubscribeReqDefaultTypeInternal _UnsubscribeReq_default_instance_;
class UnsubscribeResp;
class UnsubscribeRespDefaultTypeInternal;
extern UnsubscribeRespDefaultTypeInternal _UnsubscribeResp_default_instance_;
}  // namespace BrothServer
namespace google {
namespace protobuf {
template<> ::BrothServer::DeregisterTopicReq* Arena::CreateMaybeMessage<::BrothServer::DeregisterTopicReq>(Arena*);
template<> ::BrothServer::DeregisterTopicResp* Arena::CreateMaybeMessage<::BrothServer::DeregisterTopicResp>(Arena*);
template<> ::BrothServer::EventResp* Arena::CreateMaybeMessage<::BrothServer::EventResp>(Arena*);
template<> ::BrothServer::EventResp_FilterEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::EventResp_FilterEntry_DoNotUse>(Arena*);
template<> ::BrothServer::EventResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::EventResp_PropertiesEntry_DoNotUse>(Arena*);
template<> ::BrothServer::RegisterTopicReq* Arena::CreateMaybeMessage<::BrothServer::RegisterTopicReq>(Arena*);
template<> ::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::RegisterTopicReq_PropertiesEntry_DoNotUse>(Arena*);
template<> ::BrothServer::RegisterTopicResp* Arena::CreateMaybeMessage<::BrothServer::RegisterTopicResp>(Arena*);
template<> ::BrothServer::SendEventReq* Arena::CreateMaybeMessage<::BrothServer::SendEventReq>(Arena*);
template<> ::BrothServer::SendEventReq_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::SendEventReq_FeaturesEntry_DoNotUse>(Arena*);
template<> ::BrothServer::SendEventResp* Arena::CreateMaybeMessage<::BrothServer::SendEventResp>(Arena*);
template<> ::BrothServer::SubscribeReq* Arena::CreateMaybeMessage<::BrothServer::SubscribeReq>(Arena*);
template<> ::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::SubscribeReq_PropertiesEntry_DoNotUse>(Arena*);
template<> ::BrothServer::SubscribeResp* Arena::CreateMaybeMessage<::BrothServer::SubscribeResp>(Arena*);
template<> ::BrothServer::SubscriptionClearResp* Arena::CreateMaybeMessage<::BrothServer::SubscriptionClearResp>(Arena*);
template<> ::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::SubscriptionClearResp_PropertiesEntry_DoNotUse>(Arena*);
template<> ::BrothServer::SubscriptionMadeResp* Arena::CreateMaybeMessage<::BrothServer::SubscriptionMadeResp>(Arena*);
template<> ::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::BrothServer::SubscriptionMadeResp_PropertiesEntry_DoNotUse>(Arena*);
template<> ::BrothServer::UnsubscribeReq* Arena::CreateMaybeMessage<::BrothServer::UnsubscribeReq>(Arena*);
template<> ::BrothServer::UnsubscribeResp* Arena::CreateMaybeMessage<::BrothServer::UnsubscribeResp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace BrothServer {

// ===================================================================

class RegisterTopicReq_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RegisterTopicReq_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RegisterTopicReq_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RegisterTopicReq_PropertiesEntry_DoNotUse();
  RegisterTopicReq_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RegisterTopicReq_PropertiesEntry_DoNotUse& other);
  static const RegisterTopicReq_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RegisterTopicReq_PropertiesEntry_DoNotUse*>(&_RegisterTopicReq_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RegisterTopicReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.RegisterTopicReq) */ {
 public:
  RegisterTopicReq();
  virtual ~RegisterTopicReq();

  RegisterTopicReq(const RegisterTopicReq& from);

  inline RegisterTopicReq& operator=(const RegisterTopicReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterTopicReq(RegisterTopicReq&& from) noexcept
    : RegisterTopicReq() {
    *this = ::std::move(from);
  }

  inline RegisterTopicReq& operator=(RegisterTopicReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterTopicReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterTopicReq* internal_default_instance() {
    return reinterpret_cast<const RegisterTopicReq*>(
               &_RegisterTopicReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterTopicReq* other);
  friend void swap(RegisterTopicReq& a, RegisterTopicReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterTopicReq* New() const final {
    return CreateMaybeMessage<RegisterTopicReq>(nullptr);
  }

  RegisterTopicReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterTopicReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterTopicReq& from);
  void MergeFrom(const RegisterTopicReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterTopicReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.RegisterTopicReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:BrothServer.RegisterTopicReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RegisterTopicReq_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class RegisterTopicResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.RegisterTopicResp) */ {
 public:
  RegisterTopicResp();
  virtual ~RegisterTopicResp();

  RegisterTopicResp(const RegisterTopicResp& from);

  inline RegisterTopicResp& operator=(const RegisterTopicResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterTopicResp(RegisterTopicResp&& from) noexcept
    : RegisterTopicResp() {
    *this = ::std::move(from);
  }

  inline RegisterTopicResp& operator=(RegisterTopicResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RegisterTopicResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterTopicResp* internal_default_instance() {
    return reinterpret_cast<const RegisterTopicResp*>(
               &_RegisterTopicResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RegisterTopicResp* other);
  friend void swap(RegisterTopicResp& a, RegisterTopicResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterTopicResp* New() const final {
    return CreateMaybeMessage<RegisterTopicResp>(nullptr);
  }

  RegisterTopicResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterTopicResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterTopicResp& from);
  void MergeFrom(const RegisterTopicResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterTopicResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.RegisterTopicResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.RegisterTopicResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class DeregisterTopicReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.DeregisterTopicReq) */ {
 public:
  DeregisterTopicReq();
  virtual ~DeregisterTopicReq();

  DeregisterTopicReq(const DeregisterTopicReq& from);

  inline DeregisterTopicReq& operator=(const DeregisterTopicReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeregisterTopicReq(DeregisterTopicReq&& from) noexcept
    : DeregisterTopicReq() {
    *this = ::std::move(from);
  }

  inline DeregisterTopicReq& operator=(DeregisterTopicReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeregisterTopicReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeregisterTopicReq* internal_default_instance() {
    return reinterpret_cast<const DeregisterTopicReq*>(
               &_DeregisterTopicReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DeregisterTopicReq* other);
  friend void swap(DeregisterTopicReq& a, DeregisterTopicReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeregisterTopicReq* New() const final {
    return CreateMaybeMessage<DeregisterTopicReq>(nullptr);
  }

  DeregisterTopicReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeregisterTopicReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeregisterTopicReq& from);
  void MergeFrom(const DeregisterTopicReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregisterTopicReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.DeregisterTopicReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:BrothServer.DeregisterTopicReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class DeregisterTopicResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.DeregisterTopicResp) */ {
 public:
  DeregisterTopicResp();
  virtual ~DeregisterTopicResp();

  DeregisterTopicResp(const DeregisterTopicResp& from);

  inline DeregisterTopicResp& operator=(const DeregisterTopicResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeregisterTopicResp(DeregisterTopicResp&& from) noexcept
    : DeregisterTopicResp() {
    *this = ::std::move(from);
  }

  inline DeregisterTopicResp& operator=(DeregisterTopicResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeregisterTopicResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeregisterTopicResp* internal_default_instance() {
    return reinterpret_cast<const DeregisterTopicResp*>(
               &_DeregisterTopicResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeregisterTopicResp* other);
  friend void swap(DeregisterTopicResp& a, DeregisterTopicResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeregisterTopicResp* New() const final {
    return CreateMaybeMessage<DeregisterTopicResp>(nullptr);
  }

  DeregisterTopicResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeregisterTopicResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeregisterTopicResp& from);
  void MergeFrom(const DeregisterTopicResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeregisterTopicResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.DeregisterTopicResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.DeregisterTopicResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class SubscribeReq_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SubscribeReq_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SubscribeReq_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SubscribeReq_PropertiesEntry_DoNotUse();
  SubscribeReq_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SubscribeReq_PropertiesEntry_DoNotUse& other);
  static const SubscribeReq_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubscribeReq_PropertiesEntry_DoNotUse*>(&_SubscribeReq_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SubscribeReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.SubscribeReq) */ {
 public:
  SubscribeReq();
  virtual ~SubscribeReq();

  SubscribeReq(const SubscribeReq& from);

  inline SubscribeReq& operator=(const SubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeReq(SubscribeReq&& from) noexcept
    : SubscribeReq() {
    *this = ::std::move(from);
  }

  inline SubscribeReq& operator=(SubscribeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscribeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeReq* internal_default_instance() {
    return reinterpret_cast<const SubscribeReq*>(
               &_SubscribeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(SubscribeReq* other);
  friend void swap(SubscribeReq& a, SubscribeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeReq* New() const final {
    return CreateMaybeMessage<SubscribeReq>(nullptr);
  }

  SubscribeReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeReq& from);
  void MergeFrom(const SubscribeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.SubscribeReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:BrothServer.SubscribeReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SubscribeReq_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.SubscribeResp) */ {
 public:
  SubscribeResp();
  virtual ~SubscribeResp();

  SubscribeResp(const SubscribeResp& from);

  inline SubscribeResp& operator=(const SubscribeResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribeResp(SubscribeResp&& from) noexcept
    : SubscribeResp() {
    *this = ::std::move(from);
  }

  inline SubscribeResp& operator=(SubscribeResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscribeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeResp* internal_default_instance() {
    return reinterpret_cast<const SubscribeResp*>(
               &_SubscribeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(SubscribeResp* other);
  friend void swap(SubscribeResp& a, SubscribeResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResp* New() const final {
    return CreateMaybeMessage<SubscribeResp>(nullptr);
  }

  SubscribeResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscribeResp& from);
  void MergeFrom(const SubscribeResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.SubscribeResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.SubscribeResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.UnsubscribeReq) */ {
 public:
  UnsubscribeReq();
  virtual ~UnsubscribeReq();

  UnsubscribeReq(const UnsubscribeReq& from);

  inline UnsubscribeReq& operator=(const UnsubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsubscribeReq(UnsubscribeReq&& from) noexcept
    : UnsubscribeReq() {
    *this = ::std::move(from);
  }

  inline UnsubscribeReq& operator=(UnsubscribeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnsubscribeReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeReq* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeReq*>(
               &_UnsubscribeReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UnsubscribeReq* other);
  friend void swap(UnsubscribeReq& a, UnsubscribeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeReq* New() const final {
    return CreateMaybeMessage<UnsubscribeReq>(nullptr);
  }

  UnsubscribeReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnsubscribeReq& from);
  void MergeFrom(const UnsubscribeReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.UnsubscribeReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:BrothServer.UnsubscribeReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.UnsubscribeResp) */ {
 public:
  UnsubscribeResp();
  virtual ~UnsubscribeResp();

  UnsubscribeResp(const UnsubscribeResp& from);

  inline UnsubscribeResp& operator=(const UnsubscribeResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsubscribeResp(UnsubscribeResp&& from) noexcept
    : UnsubscribeResp() {
    *this = ::std::move(from);
  }

  inline UnsubscribeResp& operator=(UnsubscribeResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UnsubscribeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeResp* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeResp*>(
               &_UnsubscribeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(UnsubscribeResp* other);
  friend void swap(UnsubscribeResp& a, UnsubscribeResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeResp* New() const final {
    return CreateMaybeMessage<UnsubscribeResp>(nullptr);
  }

  UnsubscribeResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnsubscribeResp& from);
  void MergeFrom(const UnsubscribeResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.UnsubscribeResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.UnsubscribeResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionMadeResp_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SubscriptionMadeResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SubscriptionMadeResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SubscriptionMadeResp_PropertiesEntry_DoNotUse();
  SubscriptionMadeResp_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SubscriptionMadeResp_PropertiesEntry_DoNotUse& other);
  static const SubscriptionMadeResp_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubscriptionMadeResp_PropertiesEntry_DoNotUse*>(&_SubscriptionMadeResp_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SubscriptionMadeResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.SubscriptionMadeResp) */ {
 public:
  SubscriptionMadeResp();
  virtual ~SubscriptionMadeResp();

  SubscriptionMadeResp(const SubscriptionMadeResp& from);

  inline SubscriptionMadeResp& operator=(const SubscriptionMadeResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscriptionMadeResp(SubscriptionMadeResp&& from) noexcept
    : SubscriptionMadeResp() {
    *this = ::std::move(from);
  }

  inline SubscriptionMadeResp& operator=(SubscriptionMadeResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscriptionMadeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionMadeResp* internal_default_instance() {
    return reinterpret_cast<const SubscriptionMadeResp*>(
               &_SubscriptionMadeResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SubscriptionMadeResp* other);
  friend void swap(SubscriptionMadeResp& a, SubscriptionMadeResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionMadeResp* New() const final {
    return CreateMaybeMessage<SubscriptionMadeResp>(nullptr);
  }

  SubscriptionMadeResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionMadeResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscriptionMadeResp& from);
  void MergeFrom(const SubscriptionMadeResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionMadeResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.SubscriptionMadeResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.SubscriptionMadeResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SubscriptionMadeResp_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class SubscriptionClearResp_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SubscriptionClearResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SubscriptionClearResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SubscriptionClearResp_PropertiesEntry_DoNotUse();
  SubscriptionClearResp_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SubscriptionClearResp_PropertiesEntry_DoNotUse& other);
  static const SubscriptionClearResp_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SubscriptionClearResp_PropertiesEntry_DoNotUse*>(&_SubscriptionClearResp_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SubscriptionClearResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.SubscriptionClearResp) */ {
 public:
  SubscriptionClearResp();
  virtual ~SubscriptionClearResp();

  SubscriptionClearResp(const SubscriptionClearResp& from);

  inline SubscriptionClearResp& operator=(const SubscriptionClearResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscriptionClearResp(SubscriptionClearResp&& from) noexcept
    : SubscriptionClearResp() {
    *this = ::std::move(from);
  }

  inline SubscriptionClearResp& operator=(SubscriptionClearResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SubscriptionClearResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscriptionClearResp* internal_default_instance() {
    return reinterpret_cast<const SubscriptionClearResp*>(
               &_SubscriptionClearResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SubscriptionClearResp* other);
  friend void swap(SubscriptionClearResp& a, SubscriptionClearResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscriptionClearResp* New() const final {
    return CreateMaybeMessage<SubscriptionClearResp>(nullptr);
  }

  SubscriptionClearResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SubscriptionClearResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SubscriptionClearResp& from);
  void MergeFrom(const SubscriptionClearResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscriptionClearResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.SubscriptionClearResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> properties = 3;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.SubscriptionClearResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SubscriptionClearResp_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class SendEventReq_FeaturesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SendEventReq_FeaturesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SendEventReq_FeaturesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SendEventReq_FeaturesEntry_DoNotUse();
  SendEventReq_FeaturesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SendEventReq_FeaturesEntry_DoNotUse& other);
  static const SendEventReq_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SendEventReq_FeaturesEntry_DoNotUse*>(&_SendEventReq_FeaturesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SendEventReq final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.SendEventReq) */ {
 public:
  SendEventReq();
  virtual ~SendEventReq();

  SendEventReq(const SendEventReq& from);

  inline SendEventReq& operator=(const SendEventReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendEventReq(SendEventReq&& from) noexcept
    : SendEventReq() {
    *this = ::std::move(from);
  }

  inline SendEventReq& operator=(SendEventReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendEventReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendEventReq* internal_default_instance() {
    return reinterpret_cast<const SendEventReq*>(
               &_SendEventReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SendEventReq* other);
  friend void swap(SendEventReq& a, SendEventReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendEventReq* New() const final {
    return CreateMaybeMessage<SendEventReq>(nullptr);
  }

  SendEventReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendEventReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendEventReq& from);
  void MergeFrom(const SendEventReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendEventReq* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.SendEventReq";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> features = 3;
  int features_size() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      features() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_features();

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.AccessAuthorization auth = 1;
  bool has_auth() const;
  void clear_auth();
  static const int kAuthFieldNumber = 1;
  const ::BasilType::AccessAuthorization& auth() const;
  ::BasilType::AccessAuthorization* release_auth();
  ::BasilType::AccessAuthorization* mutable_auth();
  void set_allocated_auth(::BasilType::AccessAuthorization* auth);

  // @@protoc_insertion_point(class_scope:BrothServer.SendEventReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SendEventReq_FeaturesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > features_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::AccessAuthorization* auth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class SendEventResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.SendEventResp) */ {
 public:
  SendEventResp();
  virtual ~SendEventResp();

  SendEventResp(const SendEventResp& from);

  inline SendEventResp& operator=(const SendEventResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendEventResp(SendEventResp&& from) noexcept
    : SendEventResp() {
    *this = ::std::move(from);
  }

  inline SendEventResp& operator=(SendEventResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SendEventResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendEventResp* internal_default_instance() {
    return reinterpret_cast<const SendEventResp*>(
               &_SendEventResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SendEventResp* other);
  friend void swap(SendEventResp& a, SendEventResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendEventResp* New() const final {
    return CreateMaybeMessage<SendEventResp>(nullptr);
  }

  SendEventResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendEventResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendEventResp& from);
  void MergeFrom(const SendEventResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendEventResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.SendEventResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:BrothServer.SendEventResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// -------------------------------------------------------------------

class EventResp_FilterEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EventResp_FilterEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EventResp_FilterEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  EventResp_FilterEntry_DoNotUse();
  EventResp_FilterEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EventResp_FilterEntry_DoNotUse& other);
  static const EventResp_FilterEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EventResp_FilterEntry_DoNotUse*>(&_EventResp_FilterEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EventResp_PropertiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<EventResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<EventResp_PropertiesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  EventResp_PropertiesEntry_DoNotUse();
  EventResp_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const EventResp_PropertiesEntry_DoNotUse& other);
  static const EventResp_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EventResp_PropertiesEntry_DoNotUse*>(&_EventResp_PropertiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class EventResp final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BrothServer.EventResp) */ {
 public:
  EventResp();
  virtual ~EventResp();

  EventResp(const EventResp& from);

  inline EventResp& operator=(const EventResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventResp(EventResp&& from) noexcept
    : EventResp() {
    *this = ::std::move(from);
  }

  inline EventResp& operator=(EventResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EventResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventResp* internal_default_instance() {
    return reinterpret_cast<const EventResp*>(
               &_EventResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(EventResp* other);
  friend void swap(EventResp& a, EventResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventResp* New() const final {
    return CreateMaybeMessage<EventResp>(nullptr);
  }

  EventResp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventResp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventResp& from);
  void MergeFrom(const EventResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventResp* other);
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::google::protobuf::StringPiece FullMessageName() {
    return "BrothServer.EventResp";
  }
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> filter = 3;
  int filter_size() const;
  void clear_filter();
  static const int kFilterFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      filter() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_filter();

  // map<string, string> properties = 4;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      properties() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_properties();

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .BasilType.BasilException exception = 1;
  bool has_exception() const;
  void clear_exception();
  static const int kExceptionFieldNumber = 1;
  const ::BasilType::BasilException& exception() const;
  ::BasilType::BasilException* release_exception();
  ::BasilType::BasilException* mutable_exception();
  void set_allocated_exception(::BasilType::BasilException* exception);

  // @@protoc_insertion_point(class_scope:BrothServer.EventResp)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      EventResp_FilterEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > filter_;
  ::google::protobuf::internal::MapField<
      EventResp_PropertiesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > properties_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::BasilType::BasilException* exception_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_BrothServer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RegisterTopicReq

// .BasilType.AccessAuthorization auth = 1;
inline bool RegisterTopicReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& RegisterTopicReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:BrothServer.RegisterTopicReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* RegisterTopicReq::release_auth() {
  // @@protoc_insertion_point(field_release:BrothServer.RegisterTopicReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* RegisterTopicReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.RegisterTopicReq.auth)
  return auth_;
}
inline void RegisterTopicReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.RegisterTopicReq.auth)
}

// string topic = 2;
inline void RegisterTopicReq::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterTopicReq::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.RegisterTopicReq.topic)
  return topic_.GetNoArena();
}
inline void RegisterTopicReq::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.RegisterTopicReq.topic)
}
#if LANG_CXX11
inline void RegisterTopicReq::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.RegisterTopicReq.topic)
}
#endif
inline void RegisterTopicReq::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.RegisterTopicReq.topic)
}
inline void RegisterTopicReq::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.RegisterTopicReq.topic)
}
inline ::std::string* RegisterTopicReq::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.RegisterTopicReq.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterTopicReq::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.RegisterTopicReq.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterTopicReq::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.RegisterTopicReq.topic)
}

// map<string, string> properties = 3;
inline int RegisterTopicReq::properties_size() const {
  return properties_.size();
}
inline void RegisterTopicReq::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RegisterTopicReq::properties() const {
  // @@protoc_insertion_point(field_map:BrothServer.RegisterTopicReq.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RegisterTopicReq::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.RegisterTopicReq.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// RegisterTopicResp

// .BasilType.BasilException exception = 1;
inline bool RegisterTopicResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& RegisterTopicResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.RegisterTopicResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* RegisterTopicResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.RegisterTopicResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* RegisterTopicResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.RegisterTopicResp.exception)
  return exception_;
}
inline void RegisterTopicResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.RegisterTopicResp.exception)
}

// -------------------------------------------------------------------

// DeregisterTopicReq

// .BasilType.AccessAuthorization auth = 1;
inline bool DeregisterTopicReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& DeregisterTopicReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:BrothServer.DeregisterTopicReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* DeregisterTopicReq::release_auth() {
  // @@protoc_insertion_point(field_release:BrothServer.DeregisterTopicReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* DeregisterTopicReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.DeregisterTopicReq.auth)
  return auth_;
}
inline void DeregisterTopicReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.DeregisterTopicReq.auth)
}

// string topic = 2;
inline void DeregisterTopicReq::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeregisterTopicReq::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.DeregisterTopicReq.topic)
  return topic_.GetNoArena();
}
inline void DeregisterTopicReq::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.DeregisterTopicReq.topic)
}
#if LANG_CXX11
inline void DeregisterTopicReq::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.DeregisterTopicReq.topic)
}
#endif
inline void DeregisterTopicReq::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.DeregisterTopicReq.topic)
}
inline void DeregisterTopicReq::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.DeregisterTopicReq.topic)
}
inline ::std::string* DeregisterTopicReq::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.DeregisterTopicReq.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeregisterTopicReq::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.DeregisterTopicReq.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeregisterTopicReq::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.DeregisterTopicReq.topic)
}

// -------------------------------------------------------------------

// DeregisterTopicResp

// .BasilType.BasilException exception = 1;
inline bool DeregisterTopicResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& DeregisterTopicResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.DeregisterTopicResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* DeregisterTopicResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.DeregisterTopicResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* DeregisterTopicResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.DeregisterTopicResp.exception)
  return exception_;
}
inline void DeregisterTopicResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.DeregisterTopicResp.exception)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscribeReq

// .BasilType.AccessAuthorization auth = 1;
inline bool SubscribeReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& SubscribeReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:BrothServer.SubscribeReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* SubscribeReq::release_auth() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscribeReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* SubscribeReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscribeReq.auth)
  return auth_;
}
inline void SubscribeReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscribeReq.auth)
}

// string topic = 2;
inline void SubscribeReq::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscribeReq::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.SubscribeReq.topic)
  return topic_.GetNoArena();
}
inline void SubscribeReq::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.SubscribeReq.topic)
}
#if LANG_CXX11
inline void SubscribeReq::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.SubscribeReq.topic)
}
#endif
inline void SubscribeReq::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.SubscribeReq.topic)
}
inline void SubscribeReq::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.SubscribeReq.topic)
}
inline ::std::string* SubscribeReq::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscribeReq.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscribeReq::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscribeReq.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeReq::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscribeReq.topic)
}

// map<string, string> properties = 3;
inline int SubscribeReq::properties_size() const {
  return properties_.size();
}
inline void SubscribeReq::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SubscribeReq::properties() const {
  // @@protoc_insertion_point(field_map:BrothServer.SubscribeReq.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SubscribeReq::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.SubscribeReq.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// SubscribeResp

// .BasilType.BasilException exception = 1;
inline bool SubscribeResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& SubscribeResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.SubscribeResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* SubscribeResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscribeResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* SubscribeResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscribeResp.exception)
  return exception_;
}
inline void SubscribeResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscribeResp.exception)
}

// -------------------------------------------------------------------

// UnsubscribeReq

// .BasilType.AccessAuthorization auth = 1;
inline bool UnsubscribeReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& UnsubscribeReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:BrothServer.UnsubscribeReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* UnsubscribeReq::release_auth() {
  // @@protoc_insertion_point(field_release:BrothServer.UnsubscribeReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* UnsubscribeReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.UnsubscribeReq.auth)
  return auth_;
}
inline void UnsubscribeReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.UnsubscribeReq.auth)
}

// string topic = 2;
inline void UnsubscribeReq::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnsubscribeReq::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.UnsubscribeReq.topic)
  return topic_.GetNoArena();
}
inline void UnsubscribeReq::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.UnsubscribeReq.topic)
}
#if LANG_CXX11
inline void UnsubscribeReq::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.UnsubscribeReq.topic)
}
#endif
inline void UnsubscribeReq::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.UnsubscribeReq.topic)
}
inline void UnsubscribeReq::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.UnsubscribeReq.topic)
}
inline ::std::string* UnsubscribeReq::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.UnsubscribeReq.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnsubscribeReq::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.UnsubscribeReq.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnsubscribeReq::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.UnsubscribeReq.topic)
}

// -------------------------------------------------------------------

// UnsubscribeResp

// .BasilType.BasilException exception = 1;
inline bool UnsubscribeResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& UnsubscribeResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.UnsubscribeResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* UnsubscribeResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.UnsubscribeResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* UnsubscribeResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.UnsubscribeResp.exception)
  return exception_;
}
inline void UnsubscribeResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.UnsubscribeResp.exception)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscriptionMadeResp

// .BasilType.BasilException exception = 1;
inline bool SubscriptionMadeResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& SubscriptionMadeResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.SubscriptionMadeResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* SubscriptionMadeResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscriptionMadeResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* SubscriptionMadeResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscriptionMadeResp.exception)
  return exception_;
}
inline void SubscriptionMadeResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscriptionMadeResp.exception)
}

// string topic = 2;
inline void SubscriptionMadeResp::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionMadeResp::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.SubscriptionMadeResp.topic)
  return topic_.GetNoArena();
}
inline void SubscriptionMadeResp::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.SubscriptionMadeResp.topic)
}
#if LANG_CXX11
inline void SubscriptionMadeResp::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.SubscriptionMadeResp.topic)
}
#endif
inline void SubscriptionMadeResp::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.SubscriptionMadeResp.topic)
}
inline void SubscriptionMadeResp::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.SubscriptionMadeResp.topic)
}
inline ::std::string* SubscriptionMadeResp::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscriptionMadeResp.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionMadeResp::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscriptionMadeResp.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionMadeResp::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscriptionMadeResp.topic)
}

// map<string, string> properties = 3;
inline int SubscriptionMadeResp::properties_size() const {
  return properties_.size();
}
inline void SubscriptionMadeResp::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SubscriptionMadeResp::properties() const {
  // @@protoc_insertion_point(field_map:BrothServer.SubscriptionMadeResp.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SubscriptionMadeResp::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.SubscriptionMadeResp.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SubscriptionClearResp

// .BasilType.BasilException exception = 1;
inline bool SubscriptionClearResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& SubscriptionClearResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.SubscriptionClearResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* SubscriptionClearResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscriptionClearResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* SubscriptionClearResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscriptionClearResp.exception)
  return exception_;
}
inline void SubscriptionClearResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscriptionClearResp.exception)
}

// string topic = 2;
inline void SubscriptionClearResp::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubscriptionClearResp::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.SubscriptionClearResp.topic)
  return topic_.GetNoArena();
}
inline void SubscriptionClearResp::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.SubscriptionClearResp.topic)
}
#if LANG_CXX11
inline void SubscriptionClearResp::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.SubscriptionClearResp.topic)
}
#endif
inline void SubscriptionClearResp::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.SubscriptionClearResp.topic)
}
inline void SubscriptionClearResp::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.SubscriptionClearResp.topic)
}
inline ::std::string* SubscriptionClearResp::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.SubscriptionClearResp.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubscriptionClearResp::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.SubscriptionClearResp.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubscriptionClearResp::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SubscriptionClearResp.topic)
}

// map<string, string> properties = 3;
inline int SubscriptionClearResp::properties_size() const {
  return properties_.size();
}
inline void SubscriptionClearResp::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SubscriptionClearResp::properties() const {
  // @@protoc_insertion_point(field_map:BrothServer.SubscriptionClearResp.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SubscriptionClearResp::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.SubscriptionClearResp.properties)
  return properties_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SendEventReq

// .BasilType.AccessAuthorization auth = 1;
inline bool SendEventReq::has_auth() const {
  return this != internal_default_instance() && auth_ != nullptr;
}
inline const ::BasilType::AccessAuthorization& SendEventReq::auth() const {
  const ::BasilType::AccessAuthorization* p = auth_;
  // @@protoc_insertion_point(field_get:BrothServer.SendEventReq.auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::AccessAuthorization*>(
      &::BasilType::_AccessAuthorization_default_instance_);
}
inline ::BasilType::AccessAuthorization* SendEventReq::release_auth() {
  // @@protoc_insertion_point(field_release:BrothServer.SendEventReq.auth)
  
  ::BasilType::AccessAuthorization* temp = auth_;
  auth_ = nullptr;
  return temp;
}
inline ::BasilType::AccessAuthorization* SendEventReq::mutable_auth() {
  
  if (auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::AccessAuthorization>(GetArenaNoVirtual());
    auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.SendEventReq.auth)
  return auth_;
}
inline void SendEventReq::set_allocated_auth(::BasilType::AccessAuthorization* auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(auth_);
  }
  if (auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, auth, submessage_arena);
    }
    
  } else {
    
  }
  auth_ = auth;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SendEventReq.auth)
}

// string topic = 2;
inline void SendEventReq::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendEventReq::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.SendEventReq.topic)
  return topic_.GetNoArena();
}
inline void SendEventReq::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.SendEventReq.topic)
}
#if LANG_CXX11
inline void SendEventReq::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.SendEventReq.topic)
}
#endif
inline void SendEventReq::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.SendEventReq.topic)
}
inline void SendEventReq::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.SendEventReq.topic)
}
inline ::std::string* SendEventReq::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.SendEventReq.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendEventReq::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.SendEventReq.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendEventReq::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SendEventReq.topic)
}

// map<string, string> features = 3;
inline int SendEventReq::features_size() const {
  return features_.size();
}
inline void SendEventReq::clear_features() {
  features_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SendEventReq::features() const {
  // @@protoc_insertion_point(field_map:BrothServer.SendEventReq.features)
  return features_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SendEventReq::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.SendEventReq.features)
  return features_.MutableMap();
}

// -------------------------------------------------------------------

// SendEventResp

// string topic = 2;
inline void SendEventResp::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendEventResp::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.SendEventResp.topic)
  return topic_.GetNoArena();
}
inline void SendEventResp::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.SendEventResp.topic)
}
#if LANG_CXX11
inline void SendEventResp::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.SendEventResp.topic)
}
#endif
inline void SendEventResp::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.SendEventResp.topic)
}
inline void SendEventResp::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.SendEventResp.topic)
}
inline ::std::string* SendEventResp::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.SendEventResp.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendEventResp::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.SendEventResp.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendEventResp::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.SendEventResp.topic)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EventResp

// .BasilType.BasilException exception = 1;
inline bool EventResp::has_exception() const {
  return this != internal_default_instance() && exception_ != nullptr;
}
inline const ::BasilType::BasilException& EventResp::exception() const {
  const ::BasilType::BasilException* p = exception_;
  // @@protoc_insertion_point(field_get:BrothServer.EventResp.exception)
  return p != nullptr ? *p : *reinterpret_cast<const ::BasilType::BasilException*>(
      &::BasilType::_BasilException_default_instance_);
}
inline ::BasilType::BasilException* EventResp::release_exception() {
  // @@protoc_insertion_point(field_release:BrothServer.EventResp.exception)
  
  ::BasilType::BasilException* temp = exception_;
  exception_ = nullptr;
  return temp;
}
inline ::BasilType::BasilException* EventResp::mutable_exception() {
  
  if (exception_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasilType::BasilException>(GetArenaNoVirtual());
    exception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BrothServer.EventResp.exception)
  return exception_;
}
inline void EventResp::set_allocated_exception(::BasilType::BasilException* exception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exception_);
  }
  if (exception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exception, submessage_arena);
    }
    
  } else {
    
  }
  exception_ = exception;
  // @@protoc_insertion_point(field_set_allocated:BrothServer.EventResp.exception)
}

// string topic = 2;
inline void EventResp::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EventResp::topic() const {
  // @@protoc_insertion_point(field_get:BrothServer.EventResp.topic)
  return topic_.GetNoArena();
}
inline void EventResp::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BrothServer.EventResp.topic)
}
#if LANG_CXX11
inline void EventResp::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BrothServer.EventResp.topic)
}
#endif
inline void EventResp::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BrothServer.EventResp.topic)
}
inline void EventResp::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BrothServer.EventResp.topic)
}
inline ::std::string* EventResp::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:BrothServer.EventResp.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EventResp::release_topic() {
  // @@protoc_insertion_point(field_release:BrothServer.EventResp.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EventResp::set_allocated_topic(::std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:BrothServer.EventResp.topic)
}

// map<string, string> filter = 3;
inline int EventResp::filter_size() const {
  return filter_.size();
}
inline void EventResp::clear_filter() {
  filter_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
EventResp::filter() const {
  // @@protoc_insertion_point(field_map:BrothServer.EventResp.filter)
  return filter_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
EventResp::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.EventResp.filter)
  return filter_.MutableMap();
}

// map<string, string> properties = 4;
inline int EventResp::properties_size() const {
  return properties_.size();
}
inline void EventResp::clear_properties() {
  properties_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
EventResp::properties() const {
  // @@protoc_insertion_point(field_map:BrothServer.EventResp.properties)
  return properties_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
EventResp::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:BrothServer.EventResp.properties)
  return properties_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace BrothServer

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_BrothServer_2eproto
